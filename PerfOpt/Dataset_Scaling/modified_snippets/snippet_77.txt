\n/**************************************************************************\n**\n** Copyright (C) 1993 David E. Stewart & Zbigniew Leyk, all rights reserved.\n**\n**			     Meschach Library\n** \n** This Meschach Library is provided "as is" without any express \n** or implied warranty of any kind with respect to this software. \n** In particular the authors shall not be liable for any direct, \n** indirect, special, incidental or consequential damages arising \n** in any way from use of the software.\n** \n** Everyone is granted permission to copy, modify and redistribute this\n** Meschach Library, provided:\n**  1.  All copies contain this copyright notice.\n**  2.  All modified copies shall carry a notice stating who\n**      made the last modification and the date of such modification.\n**  3.  No charge is made for this software or works derived from it.  \n**      This clause shall not be construed as constraining other software\n**      distributed on the same medium as this software, nor is a\n**      distribution fee considered a charge.\n**\n***************************************************************************/\n\n/*\n  This file contains basic routines which are used by the functions\n  in meschach.a etc.\n  These are the routines that should be modified in order to take\n  full advantage of specialised architectures (pipelining, vector\n  processors etc).\n  */\n\nstatic	char	*rcsid = "$Id: machine.c,v 1.4 1994/01/13 05:28:56 des Exp $";\n\n#include	"machine.h"\n\n/* __ip__ -- inner product */\n#ifndef ANSI_C\ndouble	__ip__(dp1,dp2,len)\nregister Real	*dp1, *dp2;\nint	len;\n#else\ndouble	__ip__(const Real *dp1, const Real *dp2, int len)\n#endif\n{\n#ifdef VUNROLL\n    register int	len4;\n    register Real	sum1, sum2, sum3;\n#endif\n    register int	i;\n    register Real     sum;\n\n    sum = 0.0;\n#ifdef VUNROLL\n    sum1 = sum2 = sum3 = 0.0;\n    \n    len4 = len / 4;\n    len  = len % 4;\n    \n    for ( i = 0; i < len4; i++ )\n    {\n	sum  += dp1[4*i]*dp2[4*i];\n	sum1 += dp1[4*i+1]*dp2[4*i+1];\n	sum2 += dp1[4*i+2]*dp2[4*i+2];\n	sum3 += dp1[4*i+3]*dp2[4*i+3];\n    }\n    sum  += sum1 + sum2 + sum3;\n    dp1 += 4*len4;	dp2 += 4*len4;\n#endif\n    \n    for ( i = 0; i < len; i++ )\n	sum  += dp1[i]*dp2[i];\n    \n    return sum;\n}\n\n/* __mltadd__ -- scalar multiply and add c.f. v_mltadd() */\n#ifndef ANSI_C\nvoid	__mltadd__(dp1,dp2,s,len)\nregister Real	*dp1, *dp2;\nregister double s;\nregister int	len;\n#else\nvoid	__mltadd__(Real *dp1, const Real *dp2, double s, int len)\n#endif\n{\n    register int	i;\n#ifdef VUNROLL\n    register int        len4;\n    \n    len4 = len / 4;\n    len  = len % 4;\n    for ( i = 0; i < len4; i++ )\n    {\n	dp1[4*i]   += s*dp2[4*i];\n	dp1[4*i+1] += s*dp2[4*i+1];\n	dp1[4*i+2] += s*dp2[4*i+2];\n	dp1[4*i+3] += s*dp2[4*i+3];\n    }\n    dp1 += 4*len4;	dp2 += 4*len4;\n#endif\n    \n    for ( i = 0; i < len; i++ )\n	dp1[i] += s*dp2[i];\n}\n\n/* __smlt__ scalar multiply array c.f. sv_mlt() */\n#ifndef ANSI_C\nvoid	__smlt__(dp,s,out,len)\nregister Real	*dp, *out;\nregister double s;\nregister int	len;\n#else\nvoid	__smlt__(const Real *dp, double s, Real *out, int len)\n#endif\n{\n    register int	i;\n    for ( i = 0; i < len; i++ )\n	out[i] = s*dp[i];\n}\n\n/* __add__ -- add arrays c.f. v_add() */\n#ifndef ANSI_C\nvoid	__add__(dp1,dp2,out,len)\nregister Real	*dp1, *dp2, *out;\nregister int	len;\n#else\nvoid	__add__(const Real *dp1, const Real *dp2, Real *out, int len)\n#endif\n{\n    register int	i;\n    for ( i = 0; i < len; i++ )\n	out[i] = dp1[i] + dp2[i];\n}\n\n/* __sub__ -- subtract arrays c.f. v_sub() */\n#ifndef ANSI_C\nvoid	__sub__(dp1,dp2,out,len)\nregister Real	*dp1, *dp2, *out;\nregister int	len;\n#else\nvoid	__sub__(const Real *dp1, const Real *dp2, Real *out, int len)\n#endif\n{\n    register int	i;\n    for ( i = 0; i < len; i++ )\n	out[i] = dp1[i] - dp2[i];\n}\n\n/* __zero__ -- zeros an array of floating point numbers */\n#ifndef ANSI_C\nvoid	__zero__(dp,len)\nregister Real	*dp;\nregister int	len;\n#else\nvoid	__zero__(Real *dp, int len)\n#endif\n{\n#ifdef CHAR0ISDBL0\n    /* if a floating point zero is equivalent to a string of nulls */\n    MEM_ZERO((char *)dp,len*sizeof(Real));\n#else\n    /* else, need to zero the array entry by entry */\n    int	i;\n    for ( i = 0; i < len; i++ )\n	dp[i] = 0.0;\n#endif\n}\n\n