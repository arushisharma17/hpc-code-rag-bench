/*****************************************************************************/\n/*IMPORTANT:  READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.         */\n/*By downloading, copying, installing or using the software you agree        */\n/*to this license.  If you do not agree to this license, do not download,    */\n/*install, copy or use the software.                                         */\n/*                                                                           */\n/*                                                                           */\n/*Copyright (c) 2005 Northwestern University                                 */\n/*All rights reserved.                                                       */\n\n/*Redistribution of the software in source and binary forms,                 */\n/*with or without modification, is permitted provided that the               */\n/*following conditions are met:                                              */\n/*                                                                           */\n/*1       Redistributions of source code must retain the above copyright     */\n/*        notice, this list of conditions and the following disclaimer.      */\n/*                                                                           */\n/*2       Redistributions in binary form must reproduce the above copyright   */\n/*        notice, this list of conditions and the following disclaimer in the */\n/*        documentation and/or other materials provided with the distribution.*/ \n/*                                                                            */\n/*3       Neither the name of Northwestern University nor the names of its    */\n/*        contributors may be used to endorse or promote products derived     */\n/*        from this software without specific prior written permission.       */\n/*                                                                            */\n/*THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS    */\n/*IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED      */\n/*TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, NON-INFRINGEMENT AND         */\n/*FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL          */\n/*NORTHWESTERN UNIVERSITY OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,       */\n/*INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES          */\n/*(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR          */\n/*SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)          */\n/*HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,         */\n/*STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN    */\n/*ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE             */\n/*POSSIBILITY OF SUCH DAMAGE.                                                 */\n/******************************************************************************/\n/*************************************************************************/\n/**   File:         kmeans_clustering.c                                 **/\n/**   Description:  Implementation of regular k-means clustering        **/\n/**                 algorithm                                           **/\n/**   Author:  Wei-keng Liao                                            **/\n/**            ECE Department, Northwestern University                  **/\n/**            email: wkliao@ece.northwestern.edu                       **/\n/**                                                                     **/\n/**   Edited by: Jay Pisharath                                          **/\n/**              Northwestern University.                               **/\n/**                                                                     **/\n/**   ================================================================  **/\n/**																		**/\n/**   Edited by: Sang-Ha  Lee											**/\n/**				 University of Virginia									**/\n/**																		**/\n/**   Description:	No longer supports fuzzy c-means clustering;	 	**/\n/**					only regular k-means clustering.					**/\n/**					Simplified for main functionality: regular k-means	**/\n/**					clustering.											**/\n/**                                                                     **/\n/*************************************************************************/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <float.h>\n#include <math.h>\n#include "kmeans.h"\n#include <omp.h>\n\n#define RANDOM_MAX 2147483647\n\n#ifndef FLT_MAX\n#define FLT_MAX 3.40282347e+38\n#endif\n\nextern double wtime(void);\nextern int num_omp_threads;\n\nint find_nearest_point(float  *pt,          /* [nfeatures] */\n                       int     nfeatures,\n                       float **pts,         /* [npts][nfeatures] */\n                       int     npts)\n{\n    int index, i;\n    float min_dist=FLT_MAX;\n\n    /* find the cluster center id with min distance to pt */\n    for (i=0; i<npts; i++) {\n        float dist;\n        dist = euclid_dist_2(pt, pts[i], nfeatures);  /* no need square root */\n        if (dist < min_dist) {\n            min_dist = dist;\n            index    = i;\n        }\n    }\n    return(index);\n}\n\n/*----< euclid_dist_2() >----------------------------------------------------*/\n/* multi-dimensional spatial Euclid distance square */\n__inline\nfloat euclid_dist_2(float *pt1,\n                    float *pt2,\n                    int    numdims)\n{\n    int i;\n    float ans=0.0;\n\n    for (i=0; i<numdims; i++)\n        ans += (pt1[i]-pt2[i]) * (pt1[i]-pt2[i]);\n\n    return(ans);\n}\n\n\n/*----< kmeans_clustering() >---------------------------------------------*/\nfloat** kmeans_clustering(float **feature,    /* in: [npoints][nfeatures] */\n                          int     nfeatures,\n                          int     npoints,\n                          int     nclusters,\n                          float   threshold,\n                          int    *membership) /* out: [npoints] */\n{\n\n    int      i, j, k, n=0, index, loop=0;\n    int     *new_centers_len;			/* [nclusters]: no. of points in each cluster */\n	float  **new_centers;				/* [nclusters][nfeatures] */\n	float  **clusters;					/* out: [nclusters][nfeatures] */\n    float    delta;\n        \n    double   timing;\n\n	int      nthreads;\n    int    **partial_new_centers_len;\n    float ***partial_new_centers;\n\n    nthreads = num_omp_threads; \n\n    /* allocate space for returning variable clusters[] */\n    clusters    = (float**) malloc(nclusters *             sizeof(float*));\n    clusters[0] = (float*)  malloc(nclusters * nfeatures * sizeof(float));\n    for (i=1; i<nclusters; i++)\n        clusters[i] = clusters[i-1] + nfeatures;\n\n    /* randomly pick cluster centers */\n    for (i=0; i<nclusters; i++) {\n        //n = (int)rand() % npoints;\n        for (j=0; j<nfeatures; j++)\n            clusters[i][j] = feature[n][j];\n		n++;\n    }\n\n    for (i=0; i<npoints; i++)\n		membership[i] = -1;\n\n    /* need to initialize new_centers_len and new_centers[0] to all 0 */\n    new_centers_len = (int*) calloc(nclusters, sizeof(int));\n\n    new_centers    = (float**) malloc(nclusters *            sizeof(float*));\n    new_centers[0] = (float*)  calloc(nclusters * nfeatures, sizeof(float));\n    for (i=1; i<nclusters; i++)\n        new_centers[i] = new_centers[i-1] + nfeatures;\n\n\n    partial_new_centers_len    = (int**) malloc(nthreads * sizeof(int*));\n    partial_new_centers_len[0] = (int*)  calloc(nthreads*nclusters, sizeof(int));\n    for (i=1; i<nthreads; i++)\n		partial_new_centers_len[i] = partial_new_centers_len[i-1]+nclusters;\n\n	partial_new_centers    =(float***)malloc(nthreads * sizeof(float**));\n    partial_new_centers[0] =(float**) malloc(nthreads*nclusters * sizeof(float*));\n    for (i=1; i<nthreads; i++)\n        partial_new_centers[i] = partial_new_centers[i-1] + nclusters;\n\n	for (i=0; i<nthreads; i++)\n	{\n        for (j=0; j<nclusters; j++)\n            partial_new_centers[i][j] = (float*)calloc(nfeatures, sizeof(float));\n	}\n	printf("num of threads = %d\n", num_omp_threads);\n    do {\n        delta = 0.0;\n		omp_set_num_threads(num_omp_threads);\n		#pragma omp parallel \\n                shared(feature,clusters,membership,partial_new_centers,partial_new_centers_len)\n        {\n            int tid = omp_get_thread_num();				\n            #pragma omp for \\n                        private(i,j,index) \\n                        firstprivate(npoints,nclusters,nfeatures) \\n                        schedule(static) \\n                        reduction(+:delta)\n            for (i=0; i<npoints; i++) {\n	        /* find the index of nestest cluster centers */					\n	        index = find_nearest_point(feature[i],\n		             nfeatures,\n		             clusters,\n		             nclusters);				\n	        /* if membership changes, increase delta by 1 */\n	        if (membership[i] != index) delta += 1.0;\n\n	        /* assign the membership to object i */\n	        membership[i] = index;\n				\n	        /* update new cluster centers : sum of all objects located\n		       within */\n	        partial_new_centers_len[tid][index]++;				\n	        for (j=0; j<nfeatures; j++)\n		       partial_new_centers[tid][index][j] += feature[i][j];\n            }\n        } /* end of #pragma omp parallel */\n\n        /* let the main thread perform the array reduction */\n        for (i=0; i<nclusters; i++) {\n            for (j=0; j<nthreads; j++) {\n                new_centers_len[i] += partial_new_centers_len[j][i];\n                partial_new_centers_len[j][i] = 0.0;\n                for (k=0; k<nfeatures; k++) {\n                    new_centers[i][k] += partial_new_centers[j][i][k];\n                    partial_new_centers[j][i][k] = 0.0;\n                }\n            }\n        }    \n\n		/* replace old cluster centers with new_centers */\n		for (i=0; i<nclusters; i++) {\n            for (j=0; j<nfeatures; j++) {\n                if (new_centers_len[i] > 0)\n					clusters[i][j] = new_centers[i][j] / new_centers_len[i];\n				new_centers[i][j] = 0.0;   /* set back to 0 */\n			}\n			new_centers_len[i] = 0;   /* set back to 0 */\n		}\n        \n    } while (delta > threshold && loop++ < 500);\n\n    \n    free(new_centers[0]);\n    free(new_centers);\n    free(new_centers_len);\n\n    return clusters;\n}\n\n