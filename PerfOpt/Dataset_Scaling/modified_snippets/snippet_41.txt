/*****************************************************************************/\n/*IMPORTANT:  READ BEFORE DOWNLOADING, COPYING, INSTALLING OR USING.         */\n/*By downloading, copying, installing or using the software you agree        */\n/*to this license.  If you do not agree to this license, do not download,    */\n/*install, copy or use the software.                                         */\n/*                                                                           */\n/*                                                                           */\n/*Copyright (c) 2005 Northwestern University                                 */\n/*All rights reserved.                                                       */\n\n/*Redistribution of the software in source and binary forms,                 */\n/*with or without modification, is permitted provided that the               */\n/*following conditions are met:                                              */\n/*                                                                           */\n/*1       Redistributions of source code must retain the above copyright     */\n/*        notice, this list of conditions and the following disclaimer.      */\n/*                                                                           */\n/*2       Redistributions in binary form must reproduce the above copyright   */\n/*        notice, this list of conditions and the following disclaimer in the */\n/*        documentation and/or other materials provided with the distribution.*/ \n/*                                                                            */\n/*3       Neither the name of Northwestern University nor the names of its    */\n/*        contributors may be used to endorse or promote products derived     */\n/*        from this software without specific prior written permission.       */\n/*                                                                            */\n/*THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ``AS    */\n/*IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED      */\n/*TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, NON-INFRINGEMENT AND         */\n/*FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL          */\n/*NORTHWESTERN UNIVERSITY OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,       */\n/*INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES          */\n/*(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR          */\n/*SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)          */\n/*HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,         */\n/*STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN    */\n/*ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE             */\n/*POSSIBILITY OF SUCH DAMAGE.                                                 */\n/******************************************************************************/\n/*************************************************************************/\n/**   File:         example.c                                           **/\n/**   Description:  Takes as input a file:                              **/\n/**                 ascii  file: containing 1 data point per line       **/\n/**                 binary file: first int is the number of objects     **/\n/**                              2nd int is the no. of features of each **/\n/**                              object                                 **/\n/**                 This example performs a fuzzy c-means clustering    **/\n/**                 on the data. Fuzzy clustering is performed using    **/\n/**                 min to max clusters and the clustering that gets    **/\n/**                 the best score according to a compactness and       **/\n/**                 separation criterion are returned.                  **/\n/**   Author:  Wei-keng Liao                                            **/\n/**            ECE Department Northwestern University                   **/\n/**            email: wkliao@ece.northwestern.edu                       **/\n/**                                                                     **/\n/**   Edited by: Jay Pisharath                                          **/\n/**              Northwestern University.                               **/\n/**                                                                     **/\n/**   ================================================================  **/\n/**																		**/\n/**   Edited by: Sang-Ha  Lee											**/\n/**				 University of Virginia									**/\n/**																		**/\n/**   Description:	No longer supports fuzzy c-means clustering;	 	**/\n/**					only regular k-means clustering.					**/\n/**					Simplified for main functionality: regular k-means	**/\n/**					clustering.											**/\n/**                                                                     **/\n/*************************************************************************/\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <limits.h>\n#include <math.h>\n#include <sys/types.h>\n#include <fcntl.h>\n#include <omp.h>\n#include "getopt.h"\n\n#include "kmeans.h"\n\nextern double wtime(void);\n\n/*---< usage() >------------------------------------------------------------*/\nvoid usage(char *argv0) {\n    char *help =\n        "Usage: %s [switches] -i filename\n"\n        "       -i filename     :  file containing data to be clustered\n"\n        "       -b                 :input file is in binary format\n"\n		"       -k                 : number of clusters (default is 8) \n"\n        "       -t threshold    : threshold value\n";\n    fprintf(stderr, help, argv0);\n    exit(-1);\n}\n\n/*---< main() >-------------------------------------------------------------*/\nint main(int argc, char **argv) {\n           int     opt;\n    extern char   *optarg;\n    extern int     optind;\n           int     nclusters=5;\n           char   *filename = 0;           \n           float  *buf;\n           float **attributes;\n           float **cluster_centres=NULL;\n           int     i, j;           \n		   \n           int     numAttributes;\n           int     numObjects;           \n           char    line[1024];\n           int     isBinaryFile = 0;\n           int     nloops;\n           float   threshold = 0.001;\n		   double  timing;\n\n\n\n	while ( (opt=getopt(argc,argv,"i:k:t:b"))!= EOF) {\n        switch (opt) {\n            case 'i': filename=optarg;\n                      break;\n            case 'b': isBinaryFile = 1;\n                      break;\n            case 't': threshold=atof(optarg);\n                      break;\n            case 'k': nclusters = atoi(optarg);\n                      break;\n            case '?': usage(argv[0]);\n                      break;\n            default: usage(argv[0]);\n                      break;\n        }\n    }\n\n    if (filename == 0) usage(argv[0]);\n\n    numAttributes = numObjects = 0;\n\n    /* from the input file, get the numAttributes and numObjects ------------*/\n   \n    if (isBinaryFile) {\n        int infile;\n        if ((infile = open(filename, O_RDONLY, "0600")) == -1) {\n            fprintf(stderr, "Error: no such file (%s)\n", filename);\n            exit(1);\n        }\n        read(infile, &numObjects,    sizeof(int));\n        read(infile, &numAttributes, sizeof(int));\n   \n\n        /* allocate space for attributes[] and read attributes of all objects */\n        buf           = (float*) malloc(numObjects*numAttributes*sizeof(float));\n        attributes    = (float**)malloc(numObjects*             sizeof(float*));\n        attributes[0] = (float*) malloc(numObjects*numAttributes*sizeof(float));\n        for (i=1; i<numObjects; i++)\n            attributes[i] = attributes[i-1] + numAttributes;\n\n        read(infile, buf, numObjects*numAttributes*sizeof(float));\n\n        close(infile);\n    }\n    else {\n        FILE *infile;\n        if ((infile = fopen(filename, "r")) == NULL) {\n            fprintf(stderr, "Error: no such file (%s)\n", filename);\n            exit(1);\n        }\n        while (fgets(line, 1024, infile) != NULL)\n            if (strtok(line, " \t\n") != 0)\n                numObjects++;\n        rewind(infile);\n        while (fgets(line, 1024, infile) != NULL) {\n            if (strtok(line, " \t\n") != 0) {\n                /* ignore the id (first attribute): numAttributes = 1; */\n                while (strtok(NULL, " ,\t\n") != NULL) numAttributes++;\n                break;\n            }\n        }\n     \n\n        /* allocate space for attributes[] and read attributes of all objects */\n        buf           = (float*) malloc(numObjects*numAttributes*sizeof(float));\n        attributes    = (float**)malloc(numObjects*             sizeof(float*));\n        attributes[0] = (float*) malloc(numObjects*numAttributes*sizeof(float));\n        for (i=1; i<numObjects; i++)\n            attributes[i] = attributes[i-1] + numAttributes;\n        rewind(infile);\n        i = 0;\n        while (fgets(line, 1024, infile) != NULL) {\n            if (strtok(line, " \t\n") == NULL) continue; \n            for (j=0; j<numAttributes; j++) {\n                buf[i] = atof(strtok(NULL, " ,\t\n"));\n                i++;\n            }\n        }\n        fclose(infile);\n    }\n  \n    nloops = 1;	\n	printf("I/O completed\n");\n\n	memcpy(attributes[0], buf, numObjects*numAttributes*sizeof(float));\n\n	timing = omp_get_wtime();\n    for (i=0; i<nloops; i++) {\n        		\n        cluster_centres = NULL;\n        cluster(numObjects,\n                numAttributes,\n                attributes,           /* [numObjects][numAttributes] */\n                nclusters,\n                threshold,\n                &cluster_centres   \n               );\n\n     \n    }\n    timing = omp_get_wtime() - timing;\n\n	printf("number of Clusters %d\n",nclusters); \n	printf("number of Attributes %d\n\n",numAttributes); \n    /*printf("Cluster Centers Output\n"); \n	printf("The first number is cluster number and the following data is arribute value\n");\n	printf("=============================================================================\n\n");\n	\n    for (i=0; i<nclusters; i++) {\n		printf("%d: ", i);\n        for (j=0; j<numAttributes; j++)\n            printf("%f ", cluster_centres[i][j]);\n        printf("\n\n");\n    }*/\n	printf("Time for process: %f\n", timing);\n\n    free(attributes);\n    free(cluster_centres[0]);\n    free(cluster_centres);\n    free(buf);\n    return(0);\n}\n\n