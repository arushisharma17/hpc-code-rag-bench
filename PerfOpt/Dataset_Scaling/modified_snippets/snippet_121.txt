\n/**************************************************************************\n**\n** Copyright (C) 1993 David E. Steward & Zbigniew Leyk, all rights reserved.\n**\n**			     Meschach Library\n** \n** This Meschach Library is provided "as is" without any express \n** or implied warranty of any kind with respect to this software. \n** In particular the authors shall not be liable for any direct, \n** indirect, special, incidental or consequential damages arising \n** in any way from use of the software.\n** \n** Everyone is granted permission to copy, modify and redistribute this\n** Meschach Library, provided:\n**  1.  All copies contain this copyright notice.\n**  2.  All modified copies shall carry a notice stating who\n**      made the last modification and the date of such modification.\n**  3.  No charge is made for this software or works derived from it.  \n**      This clause shall not be construed as constraining other software\n**      distributed on the same medium as this software, nor is a\n**      distribution fee considered a charge.\n**\n***************************************************************************/\n\n\n/*\n	Matrix factorisation routines to work with the other matrix files.\n*/\n\n/* update.c 1.3 11/25/87 */\nstatic	char	rcsid[] = "$Id: update.c,v 1.2 1994/01/13 05:26:06 des Exp $";\n\n#include	<stdio.h>\n#include	<math.h>\n#include	"matrix.h"\n#include        "matrix2.h"\n\n\n\n\n/* Most matrix factorisation routines are in-situ unless otherwise specified */\n\n/* LDLupdate -- updates a CHolesky factorisation, replacing LDL' by\n	MD~M' = LDL' + alpha.w.w' Note: w is overwritten\n	Ref: Gill et al Math Comp 28, p516 Algorithm C1 */\n#ifndef ANSI_C\nMAT	*LDLupdate(CHmat,w,alpha)\nMAT	*CHmat;\nVEC	*w;\ndouble	alpha;\n#else\nMAT	*LDLupdate(MAT *CHmat, VEC *w, double alpha)\n#endif\n{\n	unsigned int	i,j;\n	Real	diag,new_diag,beta,p;\n\n	if ( CHmat==(MAT *)NULL || w==(VEC *)NULL )\n		error(E_NULL,"LDLupdate");\n	if ( CHmat->m != CHmat->n || w->dim != CHmat->m )\n		error(E_SIZES,"LDLupdate");\n\n	for ( j=0; j < w->dim; j++ )\n	{\n		p = w->ve[j];\n		diag = CHmat->me[j][j];\n		new_diag = CHmat->me[j][j] = diag + alpha*p*p;\n		if ( new_diag <= 0.0 )\n			error(E_POSDEF,"LDLupdate");\n		beta = p*alpha/new_diag;\n		alpha *= diag/new_diag;\n\n		for ( i=j+1; i < w->dim; i++ )\n		{\n			w->ve[i] -= p*CHmat->me[i][j];\n			CHmat->me[i][j] += beta*w->ve[i];\n			CHmat->me[j][i] = CHmat->me[i][j];\n		}\n	}\n\n	return (CHmat);\n}\n\n\n/* QRupdate -- updates QR factorisation in expanded form (seperate matrices)\n	Finds Q+, R+ s.t. Q+.R+ = Q.(R+u.v') and Q+ orthogonal, R+ upper triang\n	Ref: Golub & van Loan Matrix Computations pp437-443\n	-- does not update Q if it is NULL */\n#ifndef ANSI_C\nMAT	*QRupdate(Q,R,u,v)\nMAT	*Q,*R;\nVEC	*u,*v;\n#else\nMAT	*QRupdate(MAT *Q, MAT *R, VEC *u, VEC *v)\n#endif\n{\n	int	i,j,k;\n	Real	c,s,temp;\n\n	if ( ! R || ! u || ! v )\n		error(E_NULL,"QRupdate");\n	if ( ( Q && ( Q->m != Q->n || R->m != Q->n ) ) ||\n					u->dim != R->m || v->dim != R->n )\n		error(E_SIZES,"QRupdate");\n\n	/* find largest k s.t. u[k] != 0 */\n	for ( k=R->m-1; k>=0; k-- )\n		if ( u->ve[k] != 0.0 )\n			break;\n\n	/* transform R+u.v' to Hessenberg form */\n	for ( i=k-1; i>=0; i-- )\n	{\n		/* get Givens rotation */\n		givens(u->ve[i],u->ve[i+1],&c,&s);\n		rot_rows(R,i,i+1,c,s,R);\n		if ( Q )\n			rot_cols(Q,i,i+1,c,s,Q);\n		rot_vec(u,i,i+1,c,s,u);\n	}\n\n	/* add into R */\n	temp = u->ve[0];\n	for ( j=0; j<R->n; j++ )\n		R->me[0][j] += temp*v->ve[j];\n\n	/* transform Hessenberg to upper triangular */\n	for ( i=0; i<k; i++ )\n	{\n		givens(R->me[i][i],R->me[i+1][i],&c,&s);\n		rot_rows(R,i,i+1,c,s,R);\n		if ( Q )\n			rot_cols(Q,i,i+1,c,s,Q);\n	}\n\n	return R;\n}\n\n