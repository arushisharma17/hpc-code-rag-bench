#include "misc_math.h"\n#include <stdlib.h>\n#include <math.h>\n\n\n#define THRESHOLD_double 0.000001\n\ninline int double_eq(double f1, double f2)\n{\n	return fabs(f1-f2) < THRESHOLD_double;\n}\n\n//Given a matrix, return the matrix containing an approximation of the gradient matrix dM/dx\nMAT * gradient_x(MAT * input)\n{\n	int i, j;\n	MAT * result = m_get(input->m, input->n);\n\n	for(i = 0; i < result->m; i++)\n	{\n		for(j = 0; j < result->n; j++)\n		{\n			if(j==0)\n				m_set_val(result, i, j, m_get_val(input, i, j+1) - m_get_val(input, i, j));\n			else if(j==input->n-1)\n				m_set_val(result, i, j, m_get_val(input, i, j) - m_get_val(input, i, j-1));\n			else\n				m_set_val(result, i, j, (m_get_val(input, i, j+1) - m_get_val(input, i, j-1)) / 2.0);\n		}\n	}\n\n	return result;\n}\n\n//Given a matrix, return the matrix containing an approximation of the gradient matrix dM/dy\nMAT * gradient_y(MAT * input)\n{\n	int i, j;\n	MAT * result = m_get(input->m, input->n);\n	\n	for(i = 0; i < result->n; i++)\n	{\n		for(j = 0; j < result->m; j++)\n		{\n			if(j==0)\n				m_set_val(result, j, i, m_get_val(input, j+1, i) - m_get_val(input, j, i));\n			else if(j==input->m-1)\n				m_set_val(result, j, i, m_get_val(input, j, i) - m_get_val(input, j-1, i));\n			else\n				m_set_val(result, j, i, (m_get_val(input, j+1, i) - m_get_val(input, j-1, i)) / 2.0);\n		}\n	}\n	return result;\n}\n\n//Return the mean of the values in a vector\ndouble mean(VEC * in)\n{\n	double sum = 0.0;\n	int i;\n	for(i = 0; i < in->dim; i++)\n		sum+=v_get_val(in, i);\n\n	return sum/(double)in->dim;\n}\n\n//Return the standard deviation of the values in a vector\ndouble std_dev(VEC * in)\n{\n	double m = mean(in), sum =0.0;\n	int i;\n	for(i = 0; i < in->dim; i++)\n	{\n		double temp = v_get_val(in, i) - m;\n		sum+=temp*temp;\n	}\n	return sqrt(sum/(double)in->dim);\n}\n