//========================================================================================================================\n//	INCLUDE/DEFINE\n//========================================================================================================================\n\n// #include <stdlib.h>\n// #include <string.h>\n#include <stdio.h>\n// #include <math.h>\n// #include <time.h>\n// #include <sys/types.h>\n// #include <dirent.h>\n// #include <errno.h>\n\n//========================================================================================================================\n//	WRITE FUNCTION\n//========================================================================================================================\n\nvoid write(	char* filename,\n					fp* input, \n					int data_rows, \n					int data_cols, \n					int major,\n					int data_range){\n\n	//=====================================================================\n	//	VARIABLES\n	//=====================================================================\n\n	FILE* fid;\n	int i, j;\n\n	//=====================================================================\n	//	CREATE/OPEN FILE FOR WRITING\n	//=====================================================================\n\n	fid = fopen(filename, "w");\n	if( fid == NULL ){\n		printf( "The file was not created/opened for writing\n" );\n		return;\n	}\n\n	//=====================================================================\n	//	WRITE VALUES TO THE FILE\n	//=====================================================================\n\n	// if matrix is saved row major in memory (C)\n	if(major==0){\n		for(i=0; i<data_rows; i++){\n			for(j=0; j<data_cols; j++){\n				fprintf(fid, "%f ", (fp)input[i*data_cols+j]);\n			}\n			fprintf(fid, "\n");\n		}\n	}\n	// if matrix is saved column major in memory (MATLAB)\n	else{\n		for(i=0; i<data_rows; i++){\n			for(j=0; j<data_cols; j++){\n				fprintf(fid, "%f ", (fp)input[j*data_rows+i]);\n			}\n			fprintf(fid, "\n");\n		}\n	}\n\n	//=====================================================================\n	//	CLOSE FILE\n	//=====================================================================\n\n	fclose(fid);\n\n}\n\n//========================================================================================================================\n//	READ FUNCTION\n//========================================================================================================================\n\nvoid read(	char* filename,\n					fp* input,\n					int data_rows, \n					int data_cols,\n					int major){\n\n	//=====================================================================\n	//	VARIABLES\n	//=====================================================================\n\n	FILE* fid;\n	int i, j;\n	char c;\n	fp temp;\n\n	//=====================================================================\n	//	OPEN FILE FOR READING\n	//=====================================================================\n\n	fid = fopen(filename, "r");\n	if( fid == NULL ){\n		printf( "The file was not opened for reading\n" );\n		return;\n	}\n\n	//=====================================================================\n	//	READ VALUES FROM THE FILE\n	//=====================================================================\n\n	if(major==0){																// if matrix is saved row major in memory (C)\n		for(i=0; i<data_rows; i++){\n			for(j=0; j<data_cols; j++){\n				fscanf(fid, "%f", &temp);\n				input[i*data_cols+j] = (fp)temp;\n			}\n		}\n	}\n	else{																				// if matrix is saved column major in memory (MATLAB)\n		for(i=0; i<data_rows; i++){\n			for(j=0; j<data_cols; j++){\n				fscanf(fid, "%f", &temp);\n				input[j*data_rows+i] = (fp)temp;\n			}\n		}\n	}\n\n	//=====================================================================\n	//	CLOSE FILE\n	//=====================================================================\n\n	fclose(fid);\n\n}\n