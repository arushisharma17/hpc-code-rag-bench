#ifdef __cplusplus\nextern "C" {\n#endif\n\n//========================================================================================================================================================================================================200\n//	DEFINE/INCLUDE\n//========================================================================================================================================================================================================200\n\n//======================================================================================================================================================150\n//	LIBRARIES\n//======================================================================================================================================================150\n\n#include <omp.h>									// (in path known to compiler)			needed by openmp\n#include <stdlib.h>									// (in path known to compiler)			needed by malloc\n#include <stdio.h>									// (in path known to compiler)			needed by printf\n#include <math.h>									// (in path known to compiler)			needed by exp\n\n//======================================================================================================================================================150\n//	MAIN FUNCTION HEADER\n//======================================================================================================================================================150\n\n#include "./../main.h"								// (in the main program folder)	needed to recognized input variables\n\n//======================================================================================================================================================150\n//	UTILITIES\n//======================================================================================================================================================150\n\n#include "./../util/timer/timer.h"					// (in library path specified to compiler)	needed by timer\n\n//======================================================================================================================================================150\n//	KERNEL_CPU FUNCTION HEADER\n//======================================================================================================================================================150\n\n#include "kernel_cpu.h"								// (in the current directory)\n\n//========================================================================================================================================================================================================200\n//	PLASMAKERNEL_GPU\n//========================================================================================================================================================================================================200\n\nvoid  kernel_cpu(	par_str par, \n					dim_str dim,\n					box_str* box,\n					FOUR_VECTOR* rv,\n					fp* qv,\n					FOUR_VECTOR* fv)\n{\n\n	//======================================================================================================================================================150\n	//	Variables\n	//======================================================================================================================================================150\n\n	// timer\n	long long time0;\n\n	time0 = get_time();\n\n	// timer\n	long long time1;\n	long long time2;\n	long long time3;\n	long long time4;\n\n	// parameters\n	fp alpha;\n	fp a2;\n\n	// counters\n	int i, j, k, l;\n\n	// home box\n	long first_i;\n	FOUR_VECTOR* rA;\n	FOUR_VECTOR* fA;\n\n	// neighbor box\n	int pointer;\n	long first_j; \n	FOUR_VECTOR* rB;\n	fp* qB;\n\n	// common\n	fp r2; \n	fp u2;\n	fp fs;\n	fp vij;\n	fp fxij,fyij,fzij;\n	THREE_VECTOR d;\n\n	time1 = get_time();\n\n	//======================================================================================================================================================150\n	//	MCPU SETUP\n	//======================================================================================================================================================150\n\n	omp_set_num_threads(dim.cores_arg);\n\n	time2 = get_time();\n\n	//======================================================================================================================================================150\n	//	INPUTS\n	//======================================================================================================================================================150\n\n	alpha = par.alpha;\n	a2 = 2.0*alpha*alpha;\n\n	time3 = get_time();\n\n	//======================================================================================================================================================150\n	//	PROCESS INTERACTIONS\n	//======================================================================================================================================================150\n\n	#pragma omp	parallel for \\n				private(i, j, k) \\n				private(first_i, rA, fA) \\n				private(pointer, first_j, rB, qB) \\n				private(r2, u2, fs, vij, fxij, fyij, fzij, d)\n	for(l=0; l<dim.number_boxes; l=l+1){\n\n		//------------------------------------------------------------------------------------------100\n		//	home box - box parameters\n		//------------------------------------------------------------------------------------------100\n\n		first_i = box[l].offset;												// offset to common arrays\n\n		//------------------------------------------------------------------------------------------100\n		//	home box - distance, force, charge and type parameters from common arrays\n		//------------------------------------------------------------------------------------------100\n\n		rA = &rv[first_i];\n		fA = &fv[first_i];\n\n		//------------------------------------------------------------------------------------------100\n		//	Do for the # of (home+neighbor) boxes\n		//------------------------------------------------------------------------------------------100\n\n		for (k=0; k<(1+box[l].nn); k++) \n		{\n\n			//----------------------------------------50\n			//	neighbor box - get pointer to the right box\n			//----------------------------------------50\n\n			if(k==0){\n				pointer = l;													// set first box to be processed to home box\n			}\n			else{\n				pointer = box[l].nei[k-1].number;							// remaining boxes are neighbor boxes\n			}\n\n			//----------------------------------------50\n			//	neighbor box - box parameters\n			//----------------------------------------50\n\n			first_j = box[pointer].offset; \n\n			//----------------------------------------50\n			//	neighbor box - distance, force, charge and type parameters\n			//----------------------------------------50\n\n			rB = &rv[first_j];\n			qB = &qv[first_j];\n\n			//----------------------------------------50\n			//	Do for the # of particles in home box\n			//----------------------------------------50\n\n			for (i=0; i<NUMBER_PAR_PER_BOX; i=i+1){\n\n				// do for the # of particles in current (home or neighbor) box\n				for (j=0; j<NUMBER_PAR_PER_BOX; j=j+1){\n\n					// // coefficients\n					r2 = rA[i].v + rB[j].v - DOT(rA[i],rB[j]); \n					u2 = a2*r2;\n					vij= exp(-u2);\n					fs = 2.*vij;\n					d.x = rA[i].x  - rB[j].x; \n					d.y = rA[i].y  - rB[j].y; \n					d.z = rA[i].z  - rB[j].z; \n					fxij=fs*d.x;\n					fyij=fs*d.y;\n					fzij=fs*d.z;\n\n					// forces\n					fA[i].v +=  qB[j]*vij;\n					fA[i].x +=  qB[j]*fxij;\n					fA[i].y +=  qB[j]*fyij;\n					fA[i].z +=  qB[j]*fzij;\n\n				} // for j\n\n			} // for i\n\n		} // for k\n\n	} // for l\n\n	time4 = get_time();\n\n	//======================================================================================================================================================150\n	//	DISPLAY TIMING\n	//======================================================================================================================================================150\n\n	printf("Time spent in different stages of CPU/MCPU KERNEL:\n");\n\n	printf("%15.12f s, %15.12f % : CPU/MCPU: VARIABLES\n",				(float) (time1-time0) / 1000000, (float) (time1-time0) / (float) (time4-time0) * 100);\n	printf("%15.12f s, %15.12f % : MCPU: SET DEVICE\n",					(float) (time2-time1) / 1000000, (float) (time2-time1) / (float) (time4-time0) * 100);\n	printf("%15.12f s, %15.12f % : CPU/MCPU: INPUTS\n", 				(float) (time3-time2) / 1000000, (float) (time3-time2) / (float) (time4-time0) * 100);\n	printf("%15.12f s, %15.12f % : CPU/MCPU: KERNEL\n",					(float) (time4-time3) / 1000000, (float) (time4-time3) / (float) (time4-time0) * 100);\n\n	printf("Total time:\n");\n	printf("%.12f s\n", 												(float) (time4-time0) / 1000000);\n\n} // main\n\n#ifdef __cplusplus\n}\n#endif\n