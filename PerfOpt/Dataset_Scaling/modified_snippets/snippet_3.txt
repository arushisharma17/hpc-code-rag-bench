/*\n * =====================================================================================\n *\n *       Filename:  suite.c\n *\n *    Description:  The main wrapper for the suite\n *\n *        Version:  1.0\n *        Created:  10/22/2009 08:40:34 PM\n *       Revision:  none\n *       Compiler:  gcc\n *\n *         Author:  Liang Wang (lw2aw), lw2aw@virginia.edu\n *        Company:  CS@UVa\n *\n * =====================================================================================\n */\n\n#include <stdio.h>\n#include <unistd.h>\n#include <getopt.h>\n#include <stdlib.h>\n#include <assert.h>\n\n#include "common.h"\n\nstatic int do_verify = 0;\nint omp_num_threads = 40;\n\nstatic struct option long_options[] = {\n  /* name, has_arg, flag, val */\n  {"input", 1, NULL, 'i'},\n  {"size", 1, NULL, 's'},\n  {"verify", 0, NULL, 'v'},\n  {0,0,0,0}\n};\n\nextern void\nlud_omp(float *m, int matrix_dim);\n\nint\nmain ( int argc, char *argv[] )\n{\n  int matrix_dim = 32; /* default size */\n  int opt, option_index=0;\n  func_ret_t ret;\n  const char *input_file = NULL;\n  float *m, *mm;\n  stopwatch sw;\n\n	\n  while ((opt = getopt_long(argc, argv, "::vs:n:i:", \n                            long_options, &option_index)) != -1 ) {\n    switch(opt){\n    case 'i':\n      input_file = optarg;\n      break;\n    case 'v':\n      do_verify = 1;\n      break;\n    case 'n':\n      omp_num_threads = atoi(optarg);\n      break;\n    case 's':\n      matrix_dim = atoi(optarg);\n      printf("Generate input matrix internally, size =%d\n", matrix_dim);\n      // fprintf(stderr, "Currently not supported, use -i instead\n");\n      // fprintf(stderr, "Usage: %s [-v] [-s matrix_size|-i input_file]\n", argv[0]);\n      // exit(EXIT_FAILURE);\n      break;\n    case '?':\n      fprintf(stderr, "invalid option\n");\n      break;\n    case ':':\n      fprintf(stderr, "missing argument\n");\n      break;\n    default:\n      fprintf(stderr, "Usage: %s [-v] [-s matrix_size|-i input_file]\n",\n	      argv[0]);\n      exit(EXIT_FAILURE);\n    }\n  }\n  \n  if ( (optind < argc) || (optind == 1)) {\n    fprintf(stderr, "Usage: %s [-v] [-n no. of threads] [-s matrix_size|-i input_file]\n", argv[0]);\n    exit(EXIT_FAILURE);\n  }\n\n  if (input_file) {\n    printf("Reading matrix from file %s\n", input_file);\n    ret = create_matrix_from_file(&m, input_file, &matrix_dim);\n    if (ret != RET_SUCCESS) {\n      m = NULL;\n      fprintf(stderr, "error create matrix from file %s\n", input_file);\n      exit(EXIT_FAILURE);\n    }\n  }\n  else if (matrix_dim) {\n    printf("Creating matrix internally size=%d\n", matrix_dim);\n    ret = create_matrix(&m, matrix_dim);\n    if (ret != RET_SUCCESS) {\n      m = NULL;\n      fprintf(stderr, "error create matrix internally size=%d\n", matrix_dim);\n      exit(EXIT_FAILURE);\n    }\n  }\n \n  else {\n    printf("No input file specified!\n");\n    exit(EXIT_FAILURE);\n  } \n\n  if (do_verify){\n    printf("Before LUD\n");\n    /* print_matrix(m, matrix_dim); */\n    matrix_duplicate(m, &mm, matrix_dim);\n  }\n\n\n  stopwatch_start(&sw);\n  lud_omp(m, matrix_dim);\n  stopwatch_stop(&sw);\n  printf("Time consumed(ms): %lf\n", 1000*get_interval_by_sec(&sw));\n\n  if (do_verify){\n    printf("After LUD\n");\n    /* print_matrix(m, matrix_dim); */\n    printf(">>>Verify<<<<\n");\n    lud_verify(mm, m, matrix_dim); \n    free(mm);\n  }\n  \n  free(m);\n\n  return EXIT_SUCCESS;\n}				/* ----------  end of function main  ---------- */\n