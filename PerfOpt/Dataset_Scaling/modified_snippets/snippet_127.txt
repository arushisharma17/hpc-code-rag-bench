\n/**************************************************************************\n**\n** Copyright (C) 1993 David E. Steward & Zbigniew Leyk, all rights reserved.\n**\n**			     Meschach Library\n** \n** This Meschach Library is provided "as is" without any express \n** or implied warranty of any kind with respect to this software. \n** In particular the authors shall not be liable for any direct, \n** indirect, special, incidental or consequential damages arising \n** in any way from use of the software.\n** \n** Everyone is granted permission to copy, modify and redistribute this\n** Meschach Library, provided:\n**  1.  All copies contain this copyright notice.\n**  2.  All modified copies shall carry a notice stating who\n**      made the last modification and the date of such modification.\n**  3.  No charge is made for this software or works derived from it.  \n**      This clause shall not be construed as constraining other software\n**      distributed on the same medium as this software, nor is a\n**      distribution fee considered a charge.\n**\n***************************************************************************/\n\n\n/*\n	File for doing assorted I/O operations not invlolving\n	MAT/VEC/PERM objects\n*/\nstatic	char	rcsid[] = "$Id: otherio.c,v 1.2 1994/01/13 05:34:52 des Exp $";\n\n#include	<stdio.h>\n#include	<ctype.h>\n#include	"matrix.h"\n\n\n\n/* scratch area -- enough for a single line */\nstatic	char	scratch[MAXLINE+1];\n\n/* default value for fy_or_n */\nstatic	int	y_n_dflt = TRUE;\n\n/* fy_or_n -- yes-or-no to question is string s\n	-- question written to stderr, input from fp \n	-- if fp is NOT a tty then return y_n_dflt */\n#ifndef ANSI_C\nint	fy_or_n(fp,s)\nFILE	*fp;\nchar	*s;\n#else\nint	fy_or_n(FILE *fp, const char *s)\n#endif\n{\n	char	*cp;\n\n	if ( ! isatty(fileno(fp)) )\n		return y_n_dflt;\n\n	for ( ; ; )\n	{\n		fprintf(stderr,"%s (y/n) ? ",s);\n		if ( fgets(scratch,MAXLINE,fp)==NULL )\n			error(E_INPUT,"fy_or_n");\n		cp = scratch;\n		while ( isspace(*cp) )\n			cp++;\n		if ( *cp == 'y' || *cp == 'Y' )\n			return TRUE;\n		if ( *cp == 'n' || *cp == 'N' )\n			return FALSE;\n		fprintf(stderr,"Please reply with 'y' or 'Y' for yes ");\n		fprintf(stderr,"and 'n' or 'N' for no.\n");\n	}\n}\n\n/* yn_dflt -- sets the value of y_n_dflt to val */\n#ifndef ANSI_C\nint	yn_dflt(val)\nint	val;\n#else\nint	yn_dflt(int val)\n#endif\n{	return y_n_dflt = val;		}\n\n/* fin_int -- return integer read from file/stream fp\n	-- prompt s on stderr if fp is a tty\n	-- check that x lies between low and high: re-prompt if\n		fp is a tty, error exit otherwise\n	-- ignore check if low > high		*/\n#ifndef ANSI_C\nint	fin_int(fp,s,low,high)\nFILE	*fp;\nchar	*s;\nint	low, high;\n#else\nint	fin_int(FILE *fp, const char *s, int low, int high)\n#endif\n{\n	int	retcode, x;\n\n	if ( ! isatty(fileno(fp)) )\n	{\n		skipjunk(fp);\n		if ( (retcode=fscanf(fp,"%d",&x)) == EOF )\n			error(E_INPUT,"fin_int");\n		if ( retcode <= 0 )\n			error(E_FORMAT,"fin_int");\n		if ( low <= high && ( x < low || x > high ) )\n			error(E_BOUNDS,"fin_int");\n		return x;\n	}\n\n	for ( ; ; )\n	{\n		fprintf(stderr,"%s: ",s);\n		if ( fgets(scratch,MAXLINE,stdin)==NULL )\n			error(E_INPUT,"fin_int");\n		retcode = sscanf(scratch,"%d",&x);\n		if ( ( retcode==1 && low > high ) ||\n					( x >= low && x <= high ) )\n			return x;\n		fprintf(stderr,"Please type an integer in range [%d,%d].\n",\n							low,high);\n	}\n}\n\n\n/* fin_double -- return double read from file/stream fp\n	-- prompt s on stderr if fp is a tty\n	-- check that x lies between low and high: re-prompt if\n		fp is a tty, error exit otherwise\n	-- ignore check if low > high		*/\n#ifndef ANSI_C\ndouble	fin_double(fp,s,low,high)\nFILE	*fp;\nchar	*s;\ndouble	low, high;\n#else\ndouble	fin_double(FILE *fp, const char *s, double low, double high)\n#endif\n{\n	Real	retcode, x;\n\n	if ( ! isatty(fileno(fp)) )\n	{\n		skipjunk(fp);\n#if REAL == DOUBLE\n		if ( (retcode=fscanf(fp,"%lf",&x)) == EOF )\n#elif REAL == FLOAT\n		if ( (retcode=fscanf(fp,"%f",&x)) == EOF )\n#endif\n			error(E_INPUT,"fin_double");\n		if ( retcode <= 0 )\n			error(E_FORMAT,"fin_double");\n		if ( low <= high && ( x < low || x > high ) )\n			error(E_BOUNDS,"fin_double");\n		return (double)x;\n	}\n\n	for ( ; ; )\n	{\n		fprintf(stderr,"%s: ",s);\n		if ( fgets(scratch,MAXLINE,stdin)==NULL )\n			error(E_INPUT,"fin_double");\n#if REAL == DOUBLE\n		retcode = sscanf(scratch,"%lf",&x);\n#elif REAL == FLOAT \n		retcode = sscanf(scratch,"%f",&x);\n#endif\n		if ( ( retcode==1 && low > high ) ||\n					( x >= low && x <= high ) )\n			return (double)x;\n		fprintf(stderr,"Please type an double in range [%g,%g].\n",\n							low,high);\n	}\n}\n\n\n