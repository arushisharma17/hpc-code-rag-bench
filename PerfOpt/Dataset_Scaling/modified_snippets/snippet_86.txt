\n/**************************************************************************\n**\n** Copyright (C) 1993 David E. Steward & Zbigniew Leyk, all rights reserved.\n**\n**			     Meschach Library\n** \n** This Meschach Library is provided "as is" without any express \n** or implied warranty of any kind with respect to this software. \n** In particular the authors shall not be liable for any direct, \n** indirect, special, incidental or consequential damages arising \n** in any way from use of the software.\n** \n** Everyone is granted permission to copy, modify and redistribute this\n** Meschach Library, provided:\n**  1.  All copies contain this copyright notice.\n**  2.  All modified copies shall carry a notice stating who\n**      made the last modification and the date of such modification.\n**  3.  No charge is made for this software or works derived from it.  \n**      This clause shall not be construed as constraining other software\n**      distributed on the same medium as this software, nor is a\n**      distribution fee considered a charge.\n**\n***************************************************************************/\n\n\n/* mfuntort.c,  10/11/93 */\n\nstatic char rcsid[] = "$Id: mfuntort.c,v 1.2 1994/01/14 01:08:06 des Exp $";\n\n#include        <stdio.h>\n#include        <math.h>\n#include        "matrix.h"\n#include        "matrix2.h"\n\n\n#define errmesg(mesg)   printf("Error: %s error: line %d\n",mesg,__LINE__)\n#define notice(mesg)    printf("# Testing %s...\n",mesg);\n\n#define DIM  10\n\nvoid main()\n{\n\n   MAT *A, *B, *C, *OUTA, *OUTB, *TMP;\n   MAT *exp_A_expected, *exp_A;\n   VEC *x, *b;\n   double c, eps = 1e-10;\n   int i, j, q_out, j_out;\n\n   mem_info_on(TRUE);\n\n   A = m_get(DIM,DIM);\n   B = m_get(DIM,DIM);\n   C = m_get(DIM,DIM);\n   OUTA = m_get(DIM,DIM);\n   OUTB = m_get(DIM,DIM);\n   TMP = m_get(DIM,DIM);\n   x = v_get(DIM);\n   b = v_get(6);\n\n   notice("exponent of a matrix");\n\n   m_ident(A);\n   mem_stat_mark(1);\n   _m_exp(A,eps,OUTA,&q_out,&j_out);\n   printf("# q_out = %d, j_out = %d\n",q_out,j_out);\n\n   m_exp(A,eps,OUTA);\n   sm_mlt(exp(1.0),A,A);\n   m_sub(OUTA,A,TMP);\n   printf("# ||exp(I) - e*I|| = %g\n",m_norm_inf(TMP));\n\n   m_rand(A);\n   m_transp(A,TMP);\n   m_add(A,TMP,A);\n   B = m_copy(A,B);\n\n   m_exp(A,eps,OUTA);\n\n   symmeig(B,OUTB,x);\n   m_zero(TMP);\n   for (i=0; i < x->dim; i++)\n     TMP->me[i][i] = exp(x->ve[i]);\n   m_mlt(OUTB,TMP,C);\n   mmtr_mlt(C,OUTB,TMP);\n   m_sub(TMP,OUTA,TMP);\n   printf("# ||exp(A) - Q*exp(lambda)*Q^T|| = %g\n",m_norm_inf(TMP));\n\n   notice("polynomial of a matrix");\n   m_rand(A);\n   m_transp(A,TMP);\n   m_add(A,TMP,A);\n   B = m_copy(A,B);\n   v_rand(b);\n\n   m_poly(A,b,OUTA);\n\n   symmeig(B,OUTB,x);\n   m_zero(TMP);\n   for (i=0; i < x->dim; i++) {\n      c = b->ve[b->dim-1];\n      for (j=b->dim-2; j >= 0; j--) \n	c = c*x->ve[i] + b->ve[j];\n      TMP->me[i][i] = c;\n   }\n   m_mlt(OUTB,TMP,C);\n   mmtr_mlt(C,OUTB,TMP);\n   m_sub(TMP,OUTA,TMP);\n   printf("# ||poly(A) - Q*poly(lambda)*Q^T|| = %g\n",m_norm_inf(TMP));\n   mem_stat_free(1);\n\n\n   /* Brook Milligan's test */\n\n   M_FREE(A);\n   M_FREE(B);\n   M_FREE(C);\n\n   notice("exponent of a nonsymmetric matrix");\n   A = m_get (2, 2);\n   A -> me [0][0] = 1.0;\n   A -> me [0][1] = 1.0;\n   A -> me [1][0] = 4.0;\n   A -> me [1][1] = 1.0;\n   \n   exp_A_expected = m_get(2, 2);\n   exp_A_expected -> me [0][0] = exp (3.0) / 2.0 + exp (-1.0) / 2.0;\n   exp_A_expected -> me [0][1] = exp (3.0) / 4.0 - exp (-1.0) / 4.0;\n   exp_A_expected -> me [1][0] = exp (3.0)       - exp (-1.0);\n   exp_A_expected -> me [1][1] = exp (3.0) / 2.0 + exp (-1.0) / 2.0;\n   \n   printf ("A:\n");\n   for (i = 0; i < 2; i++)\n   {\n      for (j = 0; j < 2; j++)\n        printf ("   %15.8e", A -> me [i][j]);\n      printf ("\n");\n   }\n   \n   printf ("\nexp(A) (expected):\n");\n   for (i = 0; i < 2; i++)\n   {\n      for (j = 0; j < 2; j++)\n        printf ("   %15.8e", exp_A_expected -> me [i][j]);\n      printf ("\n");\n   }\n   \n   mem_stat_mark(3);\n   exp_A = m_exp (A, 1e-16,NULL);\n   mem_stat_free(3);\n\n   printf ("\nexp(A):\n");\n   for (i = 0; i < 2; i++)\n   {\n      for (j = 0; j < 2; j++)\n        printf ("   %15.8e", exp_A -> me [i][j]);\n      printf ("\n");\n   }\n   printf ("\nexp(A) - exp(A) (expected):\n");\n   for (i = 0; i < 2; i++)\n   {\n      for (j = 0; j < 2; j++)\n        printf ("   %15.8e", exp_A -> me [i][j] - exp_A_expected -> me [i][j]);\n      printf ("\n");\n   }\n\n   M_FREE(A);\n   M_FREE(B);\n   M_FREE(C);\n   M_FREE(exp_A);\n   M_FREE(exp_A_expected);\n   M_FREE(OUTA);\n   M_FREE(OUTB);\n   M_FREE(TMP);\n   V_FREE(b);\n   V_FREE(x);\n\n   mem_info();\n}\n\n