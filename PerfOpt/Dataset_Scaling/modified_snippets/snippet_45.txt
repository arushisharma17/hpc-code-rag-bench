//===============================================================================================================================================================================================================\n//===============================================================================================================================================================================================================\n//	DEFINE / INCLUDE\n//===============================================================================================================================================================================================================\n//===============================================================================================================================================================================================================\n\n#include <stdlib.h>\n#include <math.h>\n#include <string.h>\n#include <time.h>\n\n#include <avilib.h>\n#include <avimod.h>\n#include <omp.h>\n\n#include "define.c"\n#include "kernel.c"\n\n\n//===============================================================================================================================================================================================================200\n//	WRITE DATA FUNCTION\n//===============================================================================================================================================================================================================200\n\nvoid write_data(	char* filename,\n			int frameNo,\n			int frames_processed,\n			int endoPoints,\n			int* input_a,\n			int* input_b,\n			int epiPoints,\n			int* input_2a,\n			int* input_2b){\n\n	//================================================================================80\n	//	VARIABLES\n	//================================================================================80\n\n	FILE* fid;\n	int i,j;\n	char c;\n\n	//================================================================================80\n	//	OPEN FILE FOR READING\n	//================================================================================80\n\n	fid = fopen(filename, "w+");\n	if( fid == NULL ){\n		printf( "The file was not opened for writing\n" );\n		return;\n	}\n\n\n	//================================================================================80\n	//	WRITE VALUES TO THE FILE\n	//================================================================================80\n      fprintf(fid, "Total AVI Frames: %d\n", frameNo);	\n      fprintf(fid, "Frames Processed: %d\n", frames_processed);	\n      fprintf(fid, "endoPoints: %d\n", endoPoints);\n      fprintf(fid, "epiPoints: %d", epiPoints);\n	for(j=0; j<frames_processed;j++)\n	  {\n	    fprintf(fid, "\n---Frame %d---",j);\n	    fprintf(fid, "\n--endo--\n",j);\n	    for(i=0; i<endoPoints; i++){\n	      fprintf(fid, "%d\t", input_a[j+i*frameNo]);\n	    }\n	    fprintf(fid, "\n");\n	    for(i=0; i<endoPoints; i++){\n	      // if(input_b[j*size+i] > 2000) input_b[j*size+i]=0;\n	      fprintf(fid, "%d\t", input_b[j+i*frameNo]);\n	    }\n	    fprintf(fid, "\n--epi--\n",j);\n	    for(i=0; i<epiPoints; i++){\n	      //if(input_2a[j*size_2+i] > 2000) input_2a[j*size_2+i]=0;\n	      fprintf(fid, "%d\t", input_2a[j+i*frameNo]);\n	    }\n	    fprintf(fid, "\n");\n	    for(i=0; i<epiPoints; i++){\n	      //if(input_2b[j*size_2+i] > 2000) input_2b[j*size_2+i]=0;\n	      fprintf(fid, "%d\t", input_2b[j+i*frameNo]);\n	    }\n	  }\n	// 	================================================================================80\n	//		CLOSE FILE\n		  //	================================================================================80\n\n	fclose(fid);\n\n}\n\n//===============================================================================================================================================================================================================\n//===============================================================================================================================================================================================================\n//	MAIN FUNCTION\n//===============================================================================================================================================================================================================\n//===============================================================================================================================================================================================================\n\nint main(int argc, char *argv []){\n\n	//======================================================================================================================================================\n	//	VARIABLES\n	//======================================================================================================================================================\n\n	// counters\n	int i;\n	int frames_processed;\n\n	// parameters\n	public_struct public;\n	private_struct private[ALL_POINTS];\n\n	//======================================================================================================================================================\n	// 	FRAMES\n	//======================================================================================================================================================\n\n 	\n	\n	if(argc!=4){\n		printf("ERROR: usage: heartwall <inputfile> <num of frames> <num of threads>\n");\n		exit(1);\n	}\n	\n	char* video_file_name;\n	video_file_name = argv[1];\n	\n	avi_t* d_frames = (avi_t*)AVI_open_input_file(video_file_name, 1);														// added casting\n	if (d_frames == NULL)  {\n		   AVI_print_error((char *) "Error with AVI_open_input_file");\n		   return -1;\n	}\n\n	public.d_frames = d_frames;\n	public.frames = AVI_video_frames(public.d_frames);\n	public.frame_rows = AVI_video_height(public.d_frames);\n	public.frame_cols = AVI_video_width(public.d_frames);\n	public.frame_elem = public.frame_rows * public.frame_cols;\n	public.frame_mem = sizeof(fp) * public.frame_elem;\n\n	//======================================================================================================================================================\n	// 	CHECK INPUT ARGUMENTS\n	//======================================================================================================================================================\n\n	\n	frames_processed = atoi(argv[2]);\n	if(frames_processed<0 || frames_processed>public.frames){\n		printf("ERROR: %d is an incorrect number of frames specified, select in the range of 0-%d\n", frames_processed, public.frames);\n		return 0;\n	}\n	\n	int omp_num_threads;\n	omp_num_threads = atoi(argv[3]);\n	if (omp_num_threads <=0){\n	   printf ("num of threads must be a positive integer");\n	   return 0;\n	}\n	\n	printf("num of threads: %d\n", omp_num_threads);\n	\n	//======================================================================================================================================================\n	//	INPUTS\n	//======================================================================================================================================================\n\n	//====================================================================================================\n	//	ENDO POINTS\n	//====================================================================================================\n\n	public.endoPoints = ENDO_POINTS;\n	public.d_endo_mem = sizeof(int) * public.endoPoints;\n	public.d_endoRow = (int *)malloc(public.d_endo_mem);\n	public.d_endoRow[ 0] = 369;\n	public.d_endoRow[ 1] = 400;\n	public.d_endoRow[ 2] = 429;\n	public.d_endoRow[ 3] = 452;\n	public.d_endoRow[ 4] = 476;\n	public.d_endoRow[ 5] = 486;\n	public.d_endoRow[ 6] = 479;\n	public.d_endoRow[ 7] = 458;\n	public.d_endoRow[ 8] = 433;\n	public.d_endoRow[ 9] = 404;\n	public.d_endoRow[10] = 374;\n	public.d_endoRow[11] = 346;\n	public.d_endoRow[12] = 318;\n	public.d_endoRow[13] = 294;\n	public.d_endoRow[14] = 277;\n	public.d_endoRow[15] = 269;\n	public.d_endoRow[16] = 275;\n	public.d_endoRow[17] = 287;\n	public.d_endoRow[18] = 311;\n	public.d_endoRow[19] = 339;\n	public.d_endoCol = (int *)malloc(public.d_endo_mem);\n	public.d_endoCol[ 0] = 408;\n	public.d_endoCol[ 1] = 406;\n	public.d_endoCol[ 2] = 397;\n	public.d_endoCol[ 3] = 383;\n	public.d_endoCol[ 4] = 354;\n	public.d_endoCol[ 5] = 322;\n	public.d_endoCol[ 6] = 294;\n	public.d_endoCol[ 7] = 270;\n	public.d_endoCol[ 8] = 250;\n	public.d_endoCol[ 9] = 237;\n	public.d_endoCol[10] = 235;\n	public.d_endoCol[11] = 241;\n	public.d_endoCol[12] = 254;\n	public.d_endoCol[13] = 273;\n	public.d_endoCol[14] = 300;\n	public.d_endoCol[15] = 328;\n	public.d_endoCol[16] = 356;\n	public.d_endoCol[17] = 383;\n	public.d_endoCol[18] = 401;\n	public.d_endoCol[19] = 411;\n	public.d_tEndoRowLoc = (int *)malloc(public.d_endo_mem * public.frames);\n	public.d_tEndoColLoc = (int *)malloc(public.d_endo_mem * public.frames);\n\n	//====================================================================================================\n	//	EPI POINTS\n	//====================================================================================================\n\n	public.epiPoints = EPI_POINTS;\n	public.d_epi_mem = sizeof(int) * public.epiPoints;\n	public.d_epiRow = (int *)malloc(public.d_epi_mem);\n	public.d_epiRow[ 0] = 390;\n	public.d_epiRow[ 1] = 419;\n	public.d_epiRow[ 2] = 448;\n	public.d_epiRow[ 3] = 474;\n	public.d_epiRow[ 4] = 501;\n	public.d_epiRow[ 5] = 519;\n	public.d_epiRow[ 6] = 535;\n	public.d_epiRow[ 7] = 542;\n	public.d_epiRow[ 8] = 543;\n	public.d_epiRow[ 9] = 538;\n	public.d_epiRow[10] = 528;\n	public.d_epiRow[11] = 511;\n	public.d_epiRow[12] = 491;\n	public.d_epiRow[13] = 466;\n	public.d_epiRow[14] = 438;\n	public.d_epiRow[15] = 406;\n	public.d_epiRow[16] = 376;\n	public.d_epiRow[17] = 347;\n	public.d_epiRow[18] = 318;\n	public.d_epiRow[19] = 291;\n	public.d_epiRow[20] = 275;\n	public.d_epiRow[21] = 259;\n	public.d_epiRow[22] = 256;\n	public.d_epiRow[23] = 252;\n	public.d_epiRow[24] = 252;\n	public.d_epiRow[25] = 257;\n	public.d_epiRow[26] = 266;\n	public.d_epiRow[27] = 283;\n	public.d_epiRow[28] = 305;\n	public.d_epiRow[29] = 331;\n	public.d_epiRow[30] = 360;\n	public.d_epiCol = (int *)malloc(public.d_epi_mem);\n	public.d_epiCol[ 0] = 457;\n	public.d_epiCol[ 1] = 454;\n	public.d_epiCol[ 2] = 446;\n	public.d_epiCol[ 3] = 431;\n	public.d_epiCol[ 4] = 411;\n	public.d_epiCol[ 5] = 388;\n	public.d_epiCol[ 6] = 361;\n	public.d_epiCol[ 7] = 331;\n	public.d_epiCol[ 8] = 301;\n	public.d_epiCol[ 9] = 273;\n	public.d_epiCol[10] = 243;\n	public.d_epiCol[11] = 218;\n	public.d_epiCol[12] = 196;\n	public.d_epiCol[13] = 178;\n	public.d_epiCol[14] = 166;\n	public.d_epiCol[15] = 157;\n	public.d_epiCol[16] = 155;\n	public.d_epiCol[17] = 165;\n	public.d_epiCol[18] = 177;\n	public.d_epiCol[19] = 197;\n	public.d_epiCol[20] = 218;\n	public.d_epiCol[21] = 248;\n	public.d_epiCol[22] = 276;\n	public.d_epiCol[23] = 304;\n	public.d_epiCol[24] = 333;\n	public.d_epiCol[25] = 361;\n	public.d_epiCol[26] = 391;\n	public.d_epiCol[27] = 415;\n	public.d_epiCol[28] = 434;\n	public.d_epiCol[29] = 448;\n	public.d_epiCol[30] = 455;\n	public.d_tEpiRowLoc = (int *)malloc(public.d_epi_mem * public.frames);\n	public.d_tEpiColLoc = (int *)malloc(public.d_epi_mem * public.frames);\n\n	//====================================================================================================\n	//	ALL POINTS\n	//====================================================================================================\n\n	public.allPoints = ALL_POINTS;\n\n	//======================================================================================================================================================\n	//	CONSTANTS\n	//======================================================================================================================================================\n\n	public.tSize = 25;\n	public.sSize = 40;\n	public.maxMove = 10;\n	public.alpha = 0.87;\n\n	//======================================================================================================================================================\n	//	SUMS\n	//======================================================================================================================================================\n\n	for(i=0; i<public.allPoints; i++){\n		private[i].in_partial_sum = (fp *)malloc(sizeof(fp) * 2*public.tSize+1);\n		private[i].in_sqr_partial_sum = (fp *)malloc(sizeof(fp) * 2*public.tSize+1);\n		private[i].par_max_val = (fp *)malloc(sizeof(fp) * (2*public.tSize+2*public.sSize+1));\n		private[i].par_max_coo = (int *)malloc(sizeof(int) * (2*public.tSize+2*public.sSize+1));\n	}\n\n	//======================================================================================================================================================\n	// 	INPUT 2 (SAMPLE AROUND POINT)\n	//======================================================================================================================================================\n\n	public.in2_rows = 2 * public.sSize + 1;\n	public.in2_cols = 2 * public.sSize + 1;\n	public.in2_elem = public.in2_rows * public.in2_cols;\n	public.in2_mem = sizeof(fp) * public.in2_elem;\n\n	for(i=0; i<public.allPoints; i++){\n		private[i].d_in2 = (fp *)malloc(public.in2_mem);\n		private[i].d_in2_sqr = (fp *)malloc(public.in2_mem);\n	}\n\n	//======================================================================================================================================================\n	// 	INPUT (POINT TEMPLATE)\n	//======================================================================================================================================================\n\n	public.in_mod_rows = public.tSize+1+public.tSize;\n	public.in_mod_cols = public.in_mod_rows;\n	public.in_mod_elem = public.in_mod_rows * public.in_mod_cols;\n	public.in_mod_mem = sizeof(fp) * public.in_mod_elem;\n\n	for(i=0; i<public.allPoints; i++){\n		private[i].d_in_mod = (fp *)malloc(public.in_mod_mem);\n		private[i].d_in_sqr = (fp *)malloc(public.in_mod_mem);\n	}\n\n	//======================================================================================================================================================\n	// 	ARRAY OF TEMPLATES FOR ALL POINTS\n	//======================================================================================================================================================\n\n	public.d_endoT = (fp *)malloc(public.in_mod_mem * public.endoPoints);\n	public.d_epiT = (fp *)malloc(public.in_mod_mem * public.epiPoints);\n\n	//======================================================================================================================================================\n	// 	SETUP private POINTERS TO ROWS, COLS  AND TEMPLATE\n	//======================================================================================================================================================\n\n	for(i=0; i<public.endoPoints; i++){\n		private[i].point_no = i;\n		private[i].in_pointer = private[i].point_no * public.in_mod_elem;\n		private[i].d_Row = public.d_endoRow;												// original row coordinates\n		private[i].d_Col = public.d_endoCol;													// original col coordinates\n		private[i].d_tRowLoc = public.d_tEndoRowLoc;									// updated row coordinates\n		private[i].d_tColLoc = public.d_tEndoColLoc;										// updated row coordinates\n		private[i].d_T = public.d_endoT;														// templates\n	}\n\n	for(i=public.endoPoints; i<public.allPoints; i++){\n		private[i].point_no = i-public.endoPoints;\n		private[i].in_pointer = private[i].point_no * public.in_mod_elem;\n		private[i].d_Row = public.d_epiRow;\n		private[i].d_Col = public.d_epiCol;\n		private[i].d_tRowLoc = public.d_tEpiRowLoc;\n		private[i].d_tColLoc = public.d_tEpiColLoc;\n		private[i].d_T = public.d_epiT;\n	}\n\n	//======================================================================================================================================================\n	// 	CONVOLUTION\n	//======================================================================================================================================================\n\n	public.ioffset = 0;\n	public.joffset = 0;\n	public.conv_rows = public.in_mod_rows + public.in2_rows - 1;												// number of rows in I\n	public.conv_cols = public.in_mod_cols + public.in2_cols - 1;												// number of columns in I\n	public.conv_elem = public.conv_rows * public.conv_cols;												// number of elements\n	public.conv_mem = sizeof(fp) * public.conv_elem;\n\n	for(i=0; i<public.allPoints; i++){\n		private[i].d_conv = (fp *)malloc(public.conv_mem);\n	}\n\n	//======================================================================================================================================================\n	// 	CUMULATIVE SUM\n	//======================================================================================================================================================\n\n	//====================================================================================================\n	//	PAD ARRAY\n	//====================================================================================================\n	//====================================================================================================\n	//	VERTICAL CUMULATIVE SUM\n	//====================================================================================================\n\n	public.in2_pad_add_rows = public.in_mod_rows;\n	public.in2_pad_add_cols = public.in_mod_cols;\n	public.in2_pad_rows = public.in2_rows + 2*public.in2_pad_add_rows;\n	public.in2_pad_cols = public.in2_cols + 2*public.in2_pad_add_cols;\n	public.in2_pad_elem = public.in2_pad_rows * public.in2_pad_cols;\n	public.in2_pad_mem = sizeof(fp) * public.in2_pad_elem;\n\n	for(i=0; i<public.allPoints; i++){\n		private[i].d_in2_pad = (fp *)malloc(public.in2_pad_mem);\n	}\n\n	//====================================================================================================\n	//	SELECTION, SELECTION 2, SUBTRACTION\n	//====================================================================================================\n	//====================================================================================================\n	//	HORIZONTAL CUMULATIVE SUM\n	//====================================================================================================\n\n	public.in2_pad_cumv_sel_rowlow = 1 + public.in_mod_rows;													// (1 to n+1)\n	public.in2_pad_cumv_sel_rowhig = public.in2_pad_rows - 1;\n	public.in2_pad_cumv_sel_collow = 1;\n	public.in2_pad_cumv_sel_colhig = public.in2_pad_cols;\n	public.in2_pad_cumv_sel2_rowlow = 1;\n	public.in2_pad_cumv_sel2_rowhig = public.in2_pad_rows - public.in_mod_rows - 1;\n	public.in2_pad_cumv_sel2_collow = 1;\n	public.in2_pad_cumv_sel2_colhig = public.in2_pad_cols;\n	public.in2_sub_rows = public.in2_pad_cumv_sel_rowhig - public.in2_pad_cumv_sel_rowlow + 1;\n	public.in2_sub_cols = public.in2_pad_cumv_sel_colhig - public.in2_pad_cumv_sel_collow + 1;\n	public.in2_sub_elem = public.in2_sub_rows * public.in2_sub_cols;\n	public.in2_sub_mem = sizeof(fp) * public.in2_sub_elem;\n\n	for(i=0; i<public.allPoints; i++){\n		private[i].d_in2_sub = (fp *)malloc(public.in2_sub_mem);\n	}\n\n	//====================================================================================================\n	//	SELECTION, SELECTION 2, SUBTRACTION, SQUARE, NUMERATOR\n	//====================================================================================================\n\n	public.in2_sub_cumh_sel_rowlow = 1;\n	public.in2_sub_cumh_sel_rowhig = public.in2_sub_rows;\n	public.in2_sub_cumh_sel_collow = 1 + public.in_mod_cols;\n	public.in2_sub_cumh_sel_colhig = public.in2_sub_cols - 1;\n	public.in2_sub_cumh_sel2_rowlow = 1;\n	public.in2_sub_cumh_sel2_rowhig = public.in2_sub_rows;\n	public.in2_sub_cumh_sel2_collow = 1;\n	public.in2_sub_cumh_sel2_colhig = public.in2_sub_cols - public.in_mod_cols - 1;\n	public.in2_sub2_sqr_rows = public.in2_sub_cumh_sel_rowhig - public.in2_sub_cumh_sel_rowlow + 1;\n	public.in2_sub2_sqr_cols = public.in2_sub_cumh_sel_colhig - public.in2_sub_cumh_sel_collow + 1;\n	public.in2_sub2_sqr_elem = public.in2_sub2_sqr_rows * public.in2_sub2_sqr_cols;\n	public.in2_sub2_sqr_mem = sizeof(fp) * public.in2_sub2_sqr_elem;\n\n	for(i=0; i<public.allPoints; i++){\n		private[i].d_in2_sub2_sqr = (fp *)malloc(public.in2_sub2_sqr_mem);\n	}\n\n	//======================================================================================================================================================\n	//	CUMULATIVE SUM 2\n	//======================================================================================================================================================\n\n	//====================================================================================================\n	//	PAD ARRAY\n	//====================================================================================================\n	//====================================================================================================\n	//	VERTICAL CUMULATIVE SUM\n	//====================================================================================================\n\n	//====================================================================================================\n	//	SELECTION, SELECTION 2, SUBTRACTION\n	//====================================================================================================\n	//====================================================================================================\n	//	HORIZONTAL CUMULATIVE SUM\n	//====================================================================================================\n\n	//====================================================================================================\n	//	SELECTION, SELECTION 2, SUBTRACTION, DIFFERENTIAL LOCAL SUM, DENOMINATOR A, DENOMINATOR, CORRELATION\n	//====================================================================================================\n\n	//======================================================================================================================================================\n	//	TEMPLATE MASK CREATE\n	//======================================================================================================================================================\n\n	public.tMask_rows = public.in_mod_rows + (public.sSize+1+public.sSize) - 1;\n	public.tMask_cols = public.tMask_rows;\n	public.tMask_elem = public.tMask_rows * public.tMask_cols;\n	public.tMask_mem = sizeof(fp) * public.tMask_elem;\n\n	for(i=0; i<public.allPoints; i++){\n		private[i].d_tMask = (fp *)malloc(public.tMask_mem);\n	}\n\n	//======================================================================================================================================================\n	//	POINT MASK INITIALIZE\n	//======================================================================================================================================================\n\n	public.mask_rows = public.maxMove;\n	public.mask_cols = public.mask_rows;\n	public.mask_elem = public.mask_rows * public.mask_cols;\n	public.mask_mem = sizeof(fp) * public.mask_elem;\n\n	//======================================================================================================================================================\n	//	MASK CONVOLUTION\n	//======================================================================================================================================================\n\n	public.mask_conv_rows = public.tMask_rows;												// number of rows in I\n	public.mask_conv_cols = public.tMask_cols;												// number of columns in I\n	public.mask_conv_elem = public.mask_conv_rows * public.mask_conv_cols;												// number of elements\n	public.mask_conv_mem = sizeof(fp) * public.mask_conv_elem;\n	public.mask_conv_ioffset = (public.mask_rows-1)/2;\n	if((public.mask_rows-1) % 2 > 0.5){\n		public.mask_conv_ioffset = public.mask_conv_ioffset + 1;\n	}\n	public.mask_conv_joffset = (public.mask_cols-1)/2;\n	if((public.mask_cols-1) % 2 > 0.5){\n		public.mask_conv_joffset = public.mask_conv_joffset + 1;\n	}\n\n	for(i=0; i<public.allPoints; i++){\n		private[i].d_mask_conv = (fp *)malloc(public.mask_conv_mem);\n	}\n\n	//======================================================================================================================================================\n	//	PRINT FRAME PROGRESS START\n	//======================================================================================================================================================\n\n	printf("frame progress: ");\n	fflush(NULL);\n\n	//======================================================================================================================================================\n	//	KERNEL\n	//======================================================================================================================================================\n\n	for(public.frame_no=0; public.frame_no<frames_processed; public.frame_no++){\n\n	//====================================================================================================\n	//	GETTING FRAME\n	//====================================================================================================\n\n		// Extract a cropped version of the first frame from the video file\n		public.d_frame = get_frame(public.d_frames,				// pointer to video file\n													public.frame_no,				// number of frame that needs to be returned\n													0,										// cropped?\n													0,										// scaled?\n													1);									// converted\n\n	//====================================================================================================\n	//	PROCESSING\n	//====================================================================================================\n\n		omp_set_num_threads(omp_num_threads);\n		\n\n		#pragma omp parallel for\n		for(i=0; i<public.allPoints; i++){\n			kernel(	public,\n						private[i]);\n		}\n\n	//====================================================================================================\n	//	FREE MEMORY FOR FRAME\n	//====================================================================================================\n\n		// free frame after each loop iteration, since AVI library allocates memory for every frame fetched\n		free(public.d_frame);\n\n	//====================================================================================================\n	//	PRINT FRAME PROGRESS\n	//====================================================================================================\n\n		printf("%d ", public.frame_no);\n		fflush(NULL);\n\n	}\n\n	//======================================================================================================================================================\n	//	PRINT FRAME PROGRESS END\n	//======================================================================================================================================================\n\n	printf("\n");\n	fflush(NULL);\n\n	//======================================================================================================================================================\n	//	DEALLOCATION\n	//======================================================================================================================================================\n\n	//==================================================50\n	//	DUMP DATA TO FILE\n	//==================================================50\n#ifdef OUTPUT\n	write_data(	"result.txt",\n			public.frames,\n			frames_processed,		\n				public.endoPoints,\n				public.d_tEndoRowLoc,\n				public.d_tEndoColLoc,\n				public.epiPoints,\n				public.d_tEpiRowLoc,\n				public.d_tEpiColLoc);\n\n#endif\n\n\n\n	//====================================================================================================\n	//	COMMON\n	//====================================================================================================\n\n	free(public.d_endoRow);\n	free(public.d_endoCol);\n	free(public.d_tEndoRowLoc);\n	free(public.d_tEndoColLoc);\n	free(public.d_endoT);\n\n	free(public.d_epiRow);\n	free(public.d_epiCol);\n	free(public.d_tEpiRowLoc);\n	free(public.d_tEpiColLoc);\n	free(public.d_epiT);\n\n	//====================================================================================================\n	//	POINTERS\n	//====================================================================================================\n\n	for(i=0; i<public.allPoints; i++){\n		free(private[i].in_partial_sum);\n		free(private[i].in_sqr_partial_sum);\n		free(private[i].par_max_val);\n		free(private[i].par_max_coo);\n\n		free(private[i].d_in2);\n		free(private[i].d_in2_sqr);\n\n		free(private[i].d_in_mod);\n		free(private[i].d_in_sqr);\n\n		free(private[i].d_conv);\n\n		free(private[i].d_in2_pad);\n\n		free(private[i].d_in2_sub);\n\n		free(private[i].d_in2_sub2_sqr);\n\n		free(private[i].d_tMask);\n		free(private[i].d_mask_conv);\n	}\n\n}\n\n//========================================================================================================================================================================================================\n//========================================================================================================================================================================================================\n//	END OF FILE\n//========================================================================================================================================================================================================\n//========================================================================================================================================================================================================\n