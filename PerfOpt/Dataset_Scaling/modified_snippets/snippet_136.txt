//========================================================================================================================================================================================================200\n//======================================================================================================================================================150\n//====================================================================================================100\n//==================================================50\n\n//========================================================================================================================================================================================================200\n//	UPDATE\n//========================================================================================================================================================================================================200\n\n//	14 APR 2011 Lukasz G. Szafaryn\n\n//========================================================================================================================================================================================================200\n//	DEFINE/INCLUDE\n//========================================================================================================================================================================================================200\n\n//======================================================================================================================================================150\n//	LIBRARIES\n//======================================================================================================================================================150\n\n#include <stdio.h>					// (in path known to compiler)			needed by printf\n#include <stdlib.h>					// (in path known to compiler)			needed by malloc\n#include <stdbool.h>				// (in path known to compiler)			needed by true/false\n\n//======================================================================================================================================================150\n//	UTILITIES\n//======================================================================================================================================================150\n\n#include "./util/timer/timer.h"			// (in path specified here)\n#include "./util/num/num.h"				// (in path specified here)\n\n//======================================================================================================================================================150\n//	MAIN FUNCTION HEADER\n//======================================================================================================================================================150\n\n#include "./main.h"						// (in the current directory)\n\n//======================================================================================================================================================150\n//	KERNEL\n//======================================================================================================================================================150\n\n#include "./kernel/kernel_cpu.h"				// (in library path specified here)\n\n//========================================================================================================================================================================================================200\n//	MAIN FUNCTION\n//========================================================================================================================================================================================================200\n\nint \nmain(	int argc, \n		char *argv [])\n{\n\n	//======================================================================================================================================================150\n	//	CPU/MCPU VARIABLES\n	//======================================================================================================================================================150\n\n	// timer\n	long long time0;\n\n	time0 = get_time();\n\n	// timer\n	long long time1;\n	long long time2;\n	long long time3;\n	long long time4;\n	long long time5;\n	long long time6;\n	long long time7;\n\n	// counters\n	int i, j, k, l, m, n;\n\n	// system memory\n	par_str par_cpu;\n	dim_str dim_cpu;\n	box_str* box_cpu;\n	FOUR_VECTOR* rv_cpu;\n	fp* qv_cpu;\n	FOUR_VECTOR* fv_cpu;\n	int nh;\n\n	time1 = get_time();\n\n	//======================================================================================================================================================150\n	//	CHECK INPUT ARGUMENTS\n	//======================================================================================================================================================150\n\n	// assing default values\n	dim_cpu.cores_arg = 1;\n	dim_cpu.boxes1d_arg = 1;\n\n	// go through arguments\n	for(dim_cpu.cur_arg=1; dim_cpu.cur_arg<argc; dim_cpu.cur_arg++){\n		// check if -cores\n		if(strcmp(argv[dim_cpu.cur_arg], "-cores")==0){\n			// check if value provided\n			if(argc>=dim_cpu.cur_arg+1){\n				// check if value is a number\n				if(isInteger(argv[dim_cpu.cur_arg+1])==1){\n					dim_cpu.cores_arg = atoi(argv[dim_cpu.cur_arg+1]);\n					if(dim_cpu.cores_arg<0){\n						printf("ERROR: Wrong value to -cores parameter, cannot be <=0\n");\n						return 0;\n					}\n					dim_cpu.cur_arg = dim_cpu.cur_arg+1;\n				}\n				// value is not a number\n				else{\n					printf("ERROR: Value to -cores parameter in not a number\n");\n					return 0;\n				}\n			}\n			// value not provided\n			else{\n				printf("ERROR: Missing value to -cores parameter\n");\n				return 0;\n			}\n		}\n		// check if -boxes1d\n		else if(strcmp(argv[dim_cpu.cur_arg], "-boxes1d")==0){\n			// check if value provided\n			if(argc>=dim_cpu.cur_arg+1){\n				// check if value is a number\n				if(isInteger(argv[dim_cpu.cur_arg+1])==1){\n					dim_cpu.boxes1d_arg = atoi(argv[dim_cpu.cur_arg+1]);\n					if(dim_cpu.boxes1d_arg<0){\n						printf("ERROR: Wrong value to -boxes1d parameter, cannot be <=0\n");\n						return 0;\n					}\n					dim_cpu.cur_arg = dim_cpu.cur_arg+1;\n				}\n				// value is not a number\n				else{\n					printf("ERROR: Value to -boxes1d parameter in not a number\n");\n					return 0;\n				}\n			}\n			// value not provided\n			else{\n				printf("ERROR: Missing value to -boxes1d parameter\n");\n				return 0;\n			}\n		}\n		// unknown\n		else{\n			printf("ERROR: Unknown parameter\n");\n			return 0;\n		}\n	}\n\n	// Print configuration\n	printf("Configuration used: cores = %d, boxes1d = %d\n", dim_cpu.cores_arg, dim_cpu.boxes1d_arg);\n\n	time2 = get_time();\n\n	//======================================================================================================================================================150\n	//	INPUTS\n	//======================================================================================================================================================150\n\n	par_cpu.alpha = 0.5;\n\n	time3 = get_time();\n\n	//======================================================================================================================================================150\n	//	DIMENSIONS\n	//======================================================================================================================================================150\n\n	// total number of boxes\n	dim_cpu.number_boxes = dim_cpu.boxes1d_arg * dim_cpu.boxes1d_arg * dim_cpu.boxes1d_arg;\n\n	// how many particles space has in each direction\n	dim_cpu.space_elem = dim_cpu.number_boxes * NUMBER_PAR_PER_BOX;\n	dim_cpu.space_mem = dim_cpu.space_elem * sizeof(FOUR_VECTOR);\n	dim_cpu.space_mem2 = dim_cpu.space_elem * sizeof(fp);\n\n	// box array\n	dim_cpu.box_mem = dim_cpu.number_boxes * sizeof(box_str);\n\n	time4 = get_time();\n\n	//======================================================================================================================================================150\n	//	SYSTEM MEMORY\n	//======================================================================================================================================================150\n\n	//====================================================================================================100\n	//	BOX\n	//====================================================================================================100\n\n	// allocate boxes\n	box_cpu = (box_str*)malloc(dim_cpu.box_mem);\n\n	// initialize number of home boxes\n	nh = 0;\n\n	// home boxes in z direction\n	for(i=0; i<dim_cpu.boxes1d_arg; i++){\n		// home boxes in y direction\n		for(j=0; j<dim_cpu.boxes1d_arg; j++){\n			// home boxes in x direction\n			for(k=0; k<dim_cpu.boxes1d_arg; k++){\n\n				// current home box\n				box_cpu[nh].x = k;\n				box_cpu[nh].y = j;\n				box_cpu[nh].z = i;\n				box_cpu[nh].number = nh;\n				box_cpu[nh].offset = nh * NUMBER_PAR_PER_BOX;\n\n				// initialize number of neighbor boxes\n				box_cpu[nh].nn = 0;\n\n				// neighbor boxes in z direction\n				for(l=-1; l<2; l++){\n					// neighbor boxes in y direction\n					for(m=-1; m<2; m++){\n						// neighbor boxes in x direction\n						for(n=-1; n<2; n++){\n\n							// check if (this neighbor exists) and (it is not the same as home box)\n							if(		(((i+l)>=0 && (j+m)>=0 && (k+n)>=0)==true && ((i+l)<dim_cpu.boxes1d_arg && (j+m)<dim_cpu.boxes1d_arg && (k+n)<dim_cpu.boxes1d_arg)==true)	&&\n									(l==0 && m==0 && n==0)==false	){\n\n								// current neighbor box\n								box_cpu[nh].nei[box_cpu[nh].nn].x = (k+n);\n								box_cpu[nh].nei[box_cpu[nh].nn].y = (j+m);\n								box_cpu[nh].nei[box_cpu[nh].nn].z = (i+l);\n								box_cpu[nh].nei[box_cpu[nh].nn].number =	(box_cpu[nh].nei[box_cpu[nh].nn].z * dim_cpu.boxes1d_arg * dim_cpu.boxes1d_arg) + \n																			(box_cpu[nh].nei[box_cpu[nh].nn].y * dim_cpu.boxes1d_arg) + \n																			 box_cpu[nh].nei[box_cpu[nh].nn].x;\n								box_cpu[nh].nei[box_cpu[nh].nn].offset = box_cpu[nh].nei[box_cpu[nh].nn].number * NUMBER_PAR_PER_BOX;\n\n								// increment neighbor box\n								box_cpu[nh].nn = box_cpu[nh].nn + 1;\n\n							}\n\n						} // neighbor boxes in x direction\n					} // neighbor boxes in y direction\n				} // neighbor boxes in z direction\n\n				// increment home box\n				nh = nh + 1;\n\n			} // home boxes in x direction\n		} // home boxes in y direction\n	} // home boxes in z direction\n\n	//====================================================================================================100\n	//	PARAMETERS, DISTANCE, CHARGE AND FORCE\n	//====================================================================================================100\n\n	// random generator seed set to random value - time in this case\n	srand(time(NULL));\n\n	// input (distances)\n	rv_cpu = (FOUR_VECTOR*)malloc(dim_cpu.space_mem);\n	for(i=0; i<dim_cpu.space_elem; i=i+1){\n		rv_cpu[i].v = (rand()%10 + 1) / 10.0;			// get a number in the range 0.1 - 1.0\n		rv_cpu[i].x = (rand()%10 + 1) / 10.0;			// get a number in the range 0.1 - 1.0\n		rv_cpu[i].y = (rand()%10 + 1) / 10.0;			// get a number in the range 0.1 - 1.0\n		rv_cpu[i].z = (rand()%10 + 1) / 10.0;			// get a number in the range 0.1 - 1.0\n	}\n\n	// input (charge)\n	qv_cpu = (fp*)malloc(dim_cpu.space_mem2);\n	for(i=0; i<dim_cpu.space_elem; i=i+1){\n		qv_cpu[i] = (rand()%10 + 1) / 10.0;			// get a number in the range 0.1 - 1.0\n	}\n\n	// output (forces)\n	fv_cpu = (FOUR_VECTOR*)malloc(dim_cpu.space_mem);\n	for(i=0; i<dim_cpu.space_elem; i=i+1){\n		fv_cpu[i].v = 0;								// set to 0, because kernels keeps adding to initial value\n		fv_cpu[i].x = 0;								// set to 0, because kernels keeps adding to initial value\n		fv_cpu[i].y = 0;								// set to 0, because kernels keeps adding to initial value\n		fv_cpu[i].z = 0;								// set to 0, because kernels keeps adding to initial value\n	}\n\n	time5 = get_time();\n\n	//======================================================================================================================================================150\n	//	KERNEL\n	//======================================================================================================================================================150\n\n	//====================================================================================================100\n	//	CPU/MCPU\n	//====================================================================================================100\n\n	kernel_cpu(	par_cpu,\n				dim_cpu,\n				box_cpu,\n				rv_cpu,\n				qv_cpu,\n				fv_cpu);\n\n	time6 = get_time();\n\n	//======================================================================================================================================================150\n	//	SYSTEM MEMORY DEALLOCATION\n	//======================================================================================================================================================150\n\n	// dump results\n#ifdef OUTPUT\n        FILE *fptr;\n	fptr = fopen("result.txt", "w");	\n	for(i=0; i<dim_cpu.space_elem; i=i+1){\n        	fprintf(fptr, "%f, %f, %f, %f\n", fv_cpu[i].v, fv_cpu[i].x, fv_cpu[i].y, fv_cpu[i].z);\n	}\n	fclose(fptr);\n#endif       	\n\n\n\n	free(rv_cpu);\n	free(qv_cpu);\n	free(fv_cpu);\n	free(box_cpu);\n\n	time7 = get_time();\n\n	//======================================================================================================================================================150\n	//	DISPLAY TIMING\n	//======================================================================================================================================================150\n\n	// printf("Time spent in different stages of the application:\n");\n\n	// printf("%15.12f s, %15.12f % : VARIABLES\n",						(float) (time1-time0) / 1000000, (float) (time1-time0) / (float) (time7-time0) * 100);\n	// printf("%15.12f s, %15.12f % : INPUT ARGUMENTS\n", 					(float) (time2-time1) / 1000000, (float) (time2-time1) / (float) (time7-time0) * 100);\n	// printf("%15.12f s, %15.12f % : INPUTS\n",							(float) (time3-time2) / 1000000, (float) (time3-time2) / (float) (time7-time0) * 100);\n	// printf("%15.12f s, %15.12f % : dim_cpu\n", 							(float) (time4-time3) / 1000000, (float) (time4-time3) / (float) (time7-time0) * 100);\n	// printf("%15.12f s, %15.12f % : SYS MEM: ALO\n",						(float) (time5-time4) / 1000000, (float) (time5-time4) / (float) (time7-time0) * 100);\n\n	// printf("%15.12f s, %15.12f % : KERNEL: COMPUTE\n",					(float) (time6-time5) / 1000000, (float) (time6-time5) / (float) (time7-time0) * 100);\n\n	// printf("%15.12f s, %15.12f % : SYS MEM: FRE\n", 					(float) (time7-time6) / 1000000, (float) (time7-time6) / (float) (time7-time0) * 100);\n\n	// printf("Total time:\n");\n	// printf("%.12f s\n", 												(float) (time7-time0) / 1000000);\n\n	//======================================================================================================================================================150\n	//	RETURN\n	//======================================================================================================================================================150\n\n	return 0.0;																					// always returns 0.0\n\n}\n