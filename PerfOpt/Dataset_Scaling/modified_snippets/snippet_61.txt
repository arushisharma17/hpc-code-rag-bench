\n/**************************************************************************\n**\n** Copyright (C) 1993 David E. Steward & Zbigniew Leyk, all rights reserved.\n**\n**			     Meschach Library\n** \n** This Meschach Library is provided "as is" without any express \n** or implied warranty of any kind with respect to this software. \n** In particular the authors shall not be liable for any direct, \n** indirect, special, incidental or consequential damages arising \n** in any way from use of the software.\n** \n** Everyone is granted permission to copy, modify and redistribute this\n** Meschach Library, provided:\n**  1.  All copies contain this copyright notice.\n**  2.  All modified copies shall carry a notice stating who\n**      made the last modification and the date of such modification.\n**  3.  No charge is made for this software or works derived from it.  \n**      This clause shall not be construed as constraining other software\n**      distributed on the same medium as this software, nor is a\n**      distribution fee considered a charge.\n**\n***************************************************************************/\n\n\n\n#include        <stdio.h>\n#include        <ctype.h>\n#include        "zmatrix.h"\n\nstatic char rcsid[] = "$Id: zmatio.c,v 1.1 1994/01/13 04:25:18 des Exp $";\n\n\n\n/* local variables */\nstatic char line[MAXLINE];\n\n/**************************************************************************\n  Input routines\n  **************************************************************************/\n\n#ifndef ANSI_C\ncomplex	z_finput(fp)\nFILE	*fp;\n#else\ncomplex	z_finput(FILE *fp)\n#endif\n{\n    int		io_code;\n    complex	z;\n\n    skipjunk(fp);\n    if ( isatty(fileno(fp)) )\n    {\n	do {\n	    fprintf(stderr,"real and imag parts: ");\n	    if ( fgets(line,MAXLINE,fp) == NULL )\n		error(E_EOF,"z_finput");\n#if REAL == DOUBLE\n	    io_code = sscanf(line,"%lf%lf",&z.re,&z.im);\n#elif REAL == FLOAT\n	    io_code = sscanf(line,"%f%f",&z.re,&z.im);\n#endif\n\n	} while ( io_code != 2 );\n    }\n    else\n#if REAL == DOUBLE\n      if ( (io_code=fscanf(fp," (%lf,%lf)",&z.re,&z.im)) < 2 )\n#elif REAL == FLOAT\n      if ( (io_code=fscanf(fp," (%f,%f)",&z.re,&z.im)) < 2 )\n#endif\n	    error((io_code == EOF) ? E_EOF : E_FORMAT,"z_finput");\n\n    return z;\n}\n\n#ifndef ANSI_C\nZMAT	*zm_finput(fp,a)\nFILE    *fp;\nZMAT	*a;\n#else\nZMAT	*zm_finput(FILE *fp,ZMAT *a)\n#endif\n{\n     ZMAT        *izm_finput(),*bzm_finput();\n     \n     if ( isatty(fileno(fp)) )\n	  return izm_finput(fp,a);\n     else\n	  return bzm_finput(fp,a);\n}\n\n/* izm_finput -- interactive input of matrix */\n#ifndef ANSI_C\nZMAT     *izm_finput(fp,mat)\nFILE    *fp;\nZMAT     *mat;\n#else\nZMAT     *izm_finput(FILE *fp, ZMAT *mat)\n#endif\n{\n     char       c;\n     unsigned int      i, j, m, n, dynamic;\n     /* dynamic set to TRUE if memory allocated here */\n     \n     /* get matrix size */\n     if ( mat != ZMNULL && mat->m<MAXDIM && mat->n<MAXDIM )\n     {  m = mat->m;     n = mat->n;     dynamic = FALSE;        }\n     else\n     {\n	  dynamic = TRUE;\n	  do\n	  {\n	       fprintf(stderr,"ComplexMatrix: rows cols:");\n	       if ( fgets(line,MAXLINE,fp)==NULL )\n		    error(E_INPUT,"izm_finput");\n	  } while ( sscanf(line,"%u%u",&m,&n)<2 || m>MAXDIM || n>MAXDIM );\n	  mat = zm_get(m,n);\n     }\n     \n     /* input elements */\n     for ( i=0; i<m; i++ )\n     {\n     redo:\n	  fprintf(stderr,"row %u:\n",i);\n	  for ( j=0; j<n; j++ )\n	       do\n	       {\n	       redo2:\n		    fprintf(stderr,"entry (%u,%u): ",i,j);\n		    if ( !dynamic )\n			 fprintf(stderr,"old (%14.9g,%14.9g) new: ",\n				 mat->me[i][j].re,mat->me[i][j].im);\n		    if ( fgets(line,MAXLINE,fp)==NULL )\n			 error(E_INPUT,"izm_finput");\n		    if ( (*line == 'b' || *line == 'B') && j > 0 )\n		    {   j--;    dynamic = FALSE;        goto redo2;     }\n		    if ( (*line == 'f' || *line == 'F') && j < n-1 )\n		    {   j++;    dynamic = FALSE;        goto redo2;     }\n	       } while ( *line=='\0' ||\n#if REAL == DOUBLE\n			 sscanf(line,"%lf%lf",\n#elif REAL == FLOAT\n			sscanf(line,"%f%f",\n#endif	\n				&mat->me[i][j].re,&mat->me[i][j].im)<1 );\n	  fprintf(stderr,"Continue: ");\n	  fscanf(fp,"%c",&c);\n	  if ( c == 'n' || c == 'N' )\n	  {    dynamic = FALSE;                 goto redo;      }\n	  if ( (c == 'b' || c == 'B') /* && i > 0 */ )\n	  {     if ( i > 0 )\n		    i--;\n		dynamic = FALSE;        goto redo;\n	  }\n     }\n     \n     return (mat);\n}\n\n/* bzm_finput -- batch-file input of matrix */\n#ifndef ANSI_C\nZMAT     *bzm_finput(fp,mat)\nFILE    *fp;\nZMAT     *mat;\n#else\nZMAT     *bzm_finput(FILE *fp,ZMAT *mat)\n#endif\n{\n     unsigned int      i,j,m,n,dummy;\n     int        io_code;\n     \n     /* get dimension */\n     skipjunk(fp);\n     if ((io_code=fscanf(fp," ComplexMatrix: %u by %u",&m,&n)) < 2 ||\n	 m>MAXDIM || n>MAXDIM )\n	  error(io_code==EOF ? E_EOF : E_FORMAT,"bzm_finput");\n     \n     /* allocate memory if necessary */\n     if ( mat==ZMNULL || mat->m<m || mat->n<n )\n	  mat = zm_resize(mat,m,n);\n     \n     /* get entries */\n     for ( i=0; i<m; i++ )\n     {\n	  skipjunk(fp);\n	  if ( fscanf(fp," row %u:",&dummy) < 1 )\n	       error(E_FORMAT,"bzm_finput");\n	  for ( j=0; j<n; j++ )\n	  {\n	      /* printf("bzm_finput: j = %d\n", j); */\n#if REAL == DOUBLE\n	      if ((io_code=fscanf(fp," ( %lf , %lf )",\n#elif REAL == FLOAT\n	      if ((io_code=fscanf(fp," ( %f , %f )",\n#endif\n				  &mat->me[i][j].re,&mat->me[i][j].im)) < 2 )\n		  error(io_code==EOF ? E_EOF : E_FORMAT,"bzm_finput");\n	  }\n     }\n     \n     return (mat);\n}\n\n#ifndef ANSI_C\nZVEC     *zv_finput(fp,x)\nFILE    *fp;\nZVEC     *x;\n#else\nZVEC     *zv_finput(FILE *fp,ZVEC *x)\n#endif\n{\n     ZVEC        *izv_finput(),*bzv_finput();\n     \n     if ( isatty(fileno(fp)) )\n	  return izv_finput(fp,x);\n     else\n	  return bzv_finput(fp,x);\n}\n\n/* izv_finput -- interactive input of vector */\n#ifndef ANSI_C\nZVEC     *izv_finput(fp,vec)\nFILE    *fp;\nZVEC     *vec;\n#else\nZVEC     *izv_finput(FILE *fp,ZVEC *vec)\n#endif\n{\n     unsigned int      i,dim,dynamic;  /* dynamic set if memory allocated here */\n     \n     /* get vector dimension */\n     if ( vec != ZVNULL && vec->dim<MAXDIM )\n     {  dim = vec->dim; dynamic = FALSE;        }\n     else\n     {\n	  dynamic = TRUE;\n	  do\n	  {\n	       fprintf(stderr,"ComplexVector: dim: ");\n	       if ( fgets(line,MAXLINE,fp)==NULL )\n		    error(E_INPUT,"izv_finput");\n	  } while ( sscanf(line,"%u",&dim)<1 || dim>MAXDIM );\n	  vec = zv_get(dim);\n     }\n     \n     /* input elements */\n     for ( i=0; i<dim; i++ )\n	  do\n	  {\n	  redo:\n	       fprintf(stderr,"entry %u: ",i);\n	       if ( !dynamic )\n		    fprintf(stderr,"old (%14.9g,%14.9g) new: ",\n			    vec->ve[i].re,vec->ve[i].im);\n	       if ( fgets(line,MAXLINE,fp)==NULL )\n		    error(E_INPUT,"izv_finput");\n	       if ( (*line == 'b' || *line == 'B') && i > 0 )\n	       {        i--;    dynamic = FALSE;        goto redo;         }\n	       if ( (*line == 'f' || *line == 'F') && i < dim-1 )\n	       {        i++;    dynamic = FALSE;        goto redo;         }\n	  } while ( *line=='\0' ||\n#if REAL == DOUBLE\n		    sscanf(line,"%lf%lf",\n#elif REAL == FLOAT\n		    sscanf(line,"%f%f",\n#endif  \n			   &vec->ve[i].re,&vec->ve[i].im) < 2 );\n     \n     return (vec);\n}\n\n/* bzv_finput -- batch-file input of vector */\n#ifndef ANSI_C\nZVEC     *bzv_finput(fp,vec)\nFILE    *fp;\nZVEC    *vec;\n#else\nZVEC     *bzv_finput(FILE *fp, ZVEC *vec)\n#endif\n{\n     unsigned int      i,dim;\n     int        io_code;\n     \n     /* get dimension */\n     skipjunk(fp);\n     if ((io_code=fscanf(fp," ComplexVector: dim:%u",&dim)) < 1 ||\n	  dim>MAXDIM )\n	 error(io_code==EOF ? 7 : 6,"bzv_finput");\n\n     \n     /* allocate memory if necessary */\n     if ( vec==ZVNULL || vec->dim<dim )\n	  vec = zv_resize(vec,dim);\n     \n     /* get entries */\n     skipjunk(fp);\n     for ( i=0; i<dim; i++ )\n#if REAL == DOUBLE\n	  if ((io_code=fscanf(fp," (%lf,%lf)",\n#elif REAL == FLOAT\n          if ((io_code=fscanf(fp," (%f,%f)",\n#endif\n			      &vec->ve[i].re,&vec->ve[i].im)) < 2 )\n	       error(io_code==EOF ? 7 : 6,"bzv_finput");\n     \n     return (vec);\n}\n\n/**************************************************************************\n  Output routines\n  **************************************************************************/\nstatic const char    *zformat = " (%14.9g, %14.9g) ";\n\n#ifndef ANSI_C\nchar	*setzformat(f_string)\nchar    *f_string;\n#else\nconst char	*setzformat(const char *f_string)\n#endif\n{\n    const char	*old_f_string;\n    old_f_string = zformat;\n    if ( f_string != (char *)NULL && *f_string != '\0' )\n	zformat = f_string;\n\n    return old_f_string;\n}\n\n#ifndef ANSI_C\nvoid	z_foutput(fp,z)\nFILE	*fp;\ncomplex	z;\n#else\nvoid	z_foutput(FILE *fp,complex z)\n#endif\n{\n    fprintf(fp,zformat,z.re,z.im);\n    putc('\n',fp);\n}\n\n#ifndef ANSI_C\nvoid    zm_foutput(fp,a)\nFILE    *fp;\nZMAT     *a;\n#else\nvoid    zm_foutput(FILE *fp,ZMAT *a)\n#endif\n{\n     unsigned int      i, j, tmp;\n     \n     if ( a == ZMNULL )\n     {  fprintf(fp,"ComplexMatrix: NULL\n");   return;         }\n     fprintf(fp,"ComplexMatrix: %d by %d\n",a->m,a->n);\n     if ( a->me == (complex **)NULL )\n     {  fprintf(fp,"NULL\n");           return;         }\n     for ( i=0; i<a->m; i++ )   /* for each row... */\n     {\n	  fprintf(fp,"row %u: ",i);\n	  for ( j=0, tmp=1; j<a->n; j++, tmp++ )\n	  {             /* for each col in row... */\n	       fprintf(fp,zformat,a->me[i][j].re,a->me[i][j].im);\n	       if ( ! (tmp % 2) )       putc('\n',fp);\n	  }\n	  if ( tmp % 2 != 1 )   putc('\n',fp);\n     }\n}\n\n#ifndef ANSI_C\nvoid    zv_foutput(fp,x)\nFILE    *fp;\nZVEC     *x;\n#else\nvoid    zv_foutput(FILE *fp,ZVEC *x)\n#endif\n{\n     unsigned int      i, tmp;\n     \n     if ( x == ZVNULL )\n     {  fprintf(fp,"ComplexVector: NULL\n");   return;         }\n     fprintf(fp,"ComplexVector: dim: %d\n",x->dim);\n     if ( x->ve == (complex *)NULL )\n     {  fprintf(fp,"NULL\n");   return;         }\n     for ( i=0, tmp=0; i<x->dim; i++, tmp++ )\n     {\n	  fprintf(fp,zformat,x->ve[i].re,x->ve[i].im);\n	  if ( (tmp % 2) == 1 )   putc('\n',fp);\n     }\n     if ( (tmp % 2) != 0 )        putc('\n',fp);\n}\n\n#ifndef ANSI_C\nvoid    zm_dump(fp,a)\nFILE    *fp;\nZMAT     *a;\n#else\nvoid    zm_dump(FILE *fp, ZMAT *a)\n#endif\n{\n	unsigned int   i, j, tmp;\n     \n     if ( a == ZMNULL )\n     {  fprintf(fp,"ComplexMatrix: NULL\n");   return;         }\n     fprintf(fp,"ComplexMatrix: %d by %d @ 0x%lx\n",a->m,a->n,(long)a);\n     fprintf(fp,"\tmax_m = %d, max_n = %d, max_size = %d\n",\n	     a->max_m, a->max_n, a->max_size);\n     if ( a->me == (complex **)NULL )\n     {  fprintf(fp,"NULL\n");           return;         }\n     fprintf(fp,"a->me @ 0x%lx\n",(long)(a->me));\n     fprintf(fp,"a->base @ 0x%lx\n",(long)(a->base));\n     for ( i=0; i<a->m; i++ )   /* for each row... */\n     {\n	  fprintf(fp,"row %u: @ 0x%lx ",i,(long)(a->me[i]));\n	  for ( j=0, tmp=1; j<a->n; j++, tmp++ )\n	  {             /* for each col in row... */\n	       fprintf(fp,zformat,a->me[i][j].re,a->me[i][j].im);\n	       if ( ! (tmp % 2) )       putc('\n',fp);\n	  }\n	  if ( tmp % 2 != 1 )   putc('\n',fp);\n     }\n}\n\n\n#ifndef ANSI_C\nvoid    zv_dump(fp,x)\nFILE    *fp;\nZVEC     *x;\n#else\nvoid    zv_dump(FILE *fp,ZVEC *x)\n#endif\n{\n     unsigned int      i, tmp;\n     \n     if ( ! x )\n     {  fprintf(fp,"ComplexVector: NULL\n");   return;         }\n     fprintf(fp,"ComplexVector: dim: %d @ 0x%lx\n",x->dim,(long)(x));\n     if ( ! x->ve )\n     {  fprintf(fp,"NULL\n");   return;         }\n     fprintf(fp,"x->ve @ 0x%lx\n",(long)(x->ve));\n     for ( i=0, tmp=0; i<x->dim; i++, tmp++ )\n     {\n	  fprintf(fp,zformat,x->ve[i].re,x->ve[i].im);\n	  if ( tmp % 2 == 1 )   putc('\n',fp);\n     }\n     if ( tmp % 2 != 0 )        putc('\n',fp);\n}\n\n