// #ifdef __cplusplus\n// extern "C" {\n// #endif\n\n//========================================================================================================================================================================================================200\n//	DEFINE/INCLUDE\n//========================================================================================================================================================================================================200\n\n//======================================================================================================================================================150\n//	LIBRARIES\n//======================================================================================================================================================150\n\n#include <omp.h>									// (in directory known to compiler)			needed by openmp\n#include <stdlib.h>									// (in directory known to compiler)			needed by malloc\n#include <stdio.h>									// (in directory known to compiler)			needed by printf, stderr\n\n//======================================================================================================================================================150\n//	COMMON\n//======================================================================================================================================================150\n\n#include "../common.h"								// (in directory provided here)\n\n//======================================================================================================================================================150\n//	UTILITIES\n//======================================================================================================================================================150\n\n#include "../util/timer/timer.h"					// (in directory provided here)\n\n//========================================================================================================================================================================================================200\n//	KERNEL_CPU FUNCTION\n//========================================================================================================================================================================================================200\n\nvoid \nkernel_cpu(	int cores_arg,\n\n			record *records,\n			knode *knodes,\n			long knodes_elem,\n\n			int order,\n			long maxheight,\n			int count,\n\n			long *currKnode,\n			long *offset,\n			int *keys,\n			record *ans)\n{\n\n	//======================================================================================================================================================150\n	//	Variables\n	//======================================================================================================================================================150\n\n	// timer\n	long long time0;\n	long long time1;\n	long long time2;\n\n	time0 = get_time();\n\n	//======================================================================================================================================================150\n	//	MCPU SETUP\n	//======================================================================================================================================================150\n\n	int max_nthreads;\n	max_nthreads = omp_get_max_threads();\n	// printf("max # of threads = %d\n", max_nthreads);\n	omp_set_num_threads(cores_arg);\n	// printf("set # of threads = %d\n", cores_arg);\n\n	int threadsPerBlock;\n	threadsPerBlock = order < 1024 ? order : 1024;\n\n	time1 = get_time();\n\n	//======================================================================================================================================================150\n	//	PROCESS INTERACTIONS\n	//======================================================================================================================================================150\n\n	// private thread IDs\n	int thid;\n	int bid;\n	int i;\n\n	// process number of querries\n	#pragma omp parallel for private (i, thid)\n	for(bid = 0; bid < count; bid++){\n\n		// process levels of the tree\n		for(i = 0; i < maxheight; i++){\n\n			// process all leaves at each level\n			for(thid = 0; thid < threadsPerBlock; thid++){\n\n				// if value is between the two keys\n				if((knodes[currKnode[bid]].keys[thid]) <= keys[bid] && (knodes[currKnode[bid]].keys[thid+1] > keys[bid])){\n					// this conditional statement is inserted to avoid crush due to but in original code\n					// "offset[bid]" calculated below that addresses knodes[] in the next iteration goes outside of its bounds cause segmentation fault\n					// more specifically, values saved into knodes->indices in the main function are out of bounds of knodes that they address\n					if(knodes[offset[bid]].indices[thid] < knodes_elem){\n						offset[bid] = knodes[offset[bid]].indices[thid];\n					}\n				}\n\n			}\n\n			// set for next tree level\n			currKnode[bid] = offset[bid];\n\n		}\n\n		//At this point, we have a candidate leaf node which may contain\n		//the target record.  Check each key to hopefully find the record\n		// process all leaves at each level\n		for(thid = 0; thid < threadsPerBlock; thid++){\n\n			if(knodes[currKnode[bid]].keys[thid] == keys[bid]){\n				ans[bid].value = records[knodes[currKnode[bid]].indices[thid]].value;\n			}\n\n		}\n\n	}\n\n	time2 = get_time();\n\n	//======================================================================================================================================================150\n	//	DISPLAY TIMING\n	//======================================================================================================================================================150\n\n	printf("Time spent in different stages of CPU/MCPU KERNEL:\n");\n\n	printf("%15.12f s, %15.12f % : MCPU: SET DEVICE\n",					(float) (time1-time0) / 1000000, (float) (time1-time0) / (float) (time2-time0) * 100);\n	printf("%15.12f s, %15.12f % : CPU/MCPU: KERNEL\n",					(float) (time2-time1) / 1000000, (float) (time2-time1) / (float) (time2-time0) * 100);\n\n	printf("Total time:\n");\n	printf("%.12f s\n", 												(float) (time2-time0) / 1000000);\n\n}\n\n//========================================================================================================================================================================================================200\n//	END\n//========================================================================================================================================================================================================200\n\n// #ifdef __cplusplus\n// }\n// #endif\n\n