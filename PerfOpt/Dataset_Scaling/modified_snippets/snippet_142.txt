#include <stdio.h>\n#include <unistd.h>\n#include <fstream>\n\n#define int2 int32_t\n#define ulong4 uint32_t\n#define uint4 uint32_t\n#include "mummergpu.h"\n\nchar * OPT_reffilename = NULL;\nchar * OPT_qryfilename = NULL;\nchar * OPT_dotfilename = NULL;\nchar * OPT_texfilename = NULL;\nint    OPT_num_reference_pages = 1;\nchar * OPT_stats_file = NULL;\n\n// MUMmer options\nint  OPT_match_length = 20;\nbool OPT_reverse = false;\nbool OPT_forwardreverse = false;\nbool OPT_forwardcoordinates = false;\nbool OPT_showQueryLength = false;\nbool OPT_maxmatch = false;\nbool OPT_on_cpu = false;\nbool OPT_stream_queries = false;\n\nvoid printHelp()\n{\n   fprintf(stderr, \n		   "Align a set of query strings to a reference sequence using the GPU.\n"\n		   "\n"\n		   "Usage: mummergpu [options] reference.fa query.fa\n"\n		   "\n"\n		   "Options\n"\n		   "  -h Print this help\n"\n		   "  -d file.dot Output suffix tree in dot format\n"\n		   "  -t file.tex Output suffix tree texture\n"\n		   "  -C             Compute the matches using the CPU instead of the GPU\n"\n		   "  -s <file>      write timing and memory stats to <file> \n"\n           "\n"\n           "  -l <matchlen>  minimal match length to report [Default: 20]\n"\n           "  -b             compute forward and reverse complement matches\n"\n           "  -r             only compute reverse complement matches\n"\n           "  -c             report the query-position of a reverse complement match\n"\n           "                 relative to the original query sequence\n"\n           "  -L             show the length of the query sequences on the header line\n"\n	  );\n\n   exit(0);\n}\n\nvoid printUsage()\n{\n   fprintf(stderr, "Usage: mummergpu [options] reference.fa query.fa\n");\n   exit(0);\n}\n\n\nvoid ParseCommandLine(int argc, char ** argv)\n{\n   bool errflg = false;\n   int ch;\n   optarg = NULL;\n\n   while(!errflg && ((ch = getopt (argc, argv, "aCchql:d:t:s:brcLM")) != EOF))\n   {\n      switch  (ch)\n	  {\n		 case 'h': printHelp(); break;\n		 case '?': fprintf(stderr, "Unknown option %c\n", optopt); errflg = true; break;\n		 case 'd': OPT_dotfilename = optarg; break;\n		 case 't': OPT_texfilename = optarg; break;\n		 case 'C': OPT_on_cpu = true; break;\n		 case 'l': OPT_match_length = atoi(optarg); break;\n         case 'b': OPT_forwardreverse = true; break;\n         case 'r': OPT_reverse = true; break;\n		 case 's': OPT_stats_file = optarg; break;\n         case 'c': OPT_forwardcoordinates = true; break;\n         case 'L': OPT_showQueryLength = true; break;\n         case 'M': OPT_maxmatch = true; break;\n\n		 default: errflg = true; break;\n	  };\n   }\n\n   if ((optind != argc-2) || errflg) { printUsage(); }\n\n   if (!OPT_maxmatch)\n   {\n     OPT_maxmatch = true;\n   }\n\n   if (OPT_reverse && OPT_forwardreverse)\n   {\n     fprintf(stderr, "ERROR: Reverse (-r) and Forward & Reverse (-b) specified\n");\n     exit(1);\n   }\n\n   OPT_reffilename = argv[optind++];\n   OPT_qryfilename = argv[optind++];\n}\n\nint main(int argc, char* argv[])\n{\n   ParseCommandLine(argc, argv);\n\n   fprintf(stderr, "TWO_LEVEL_NODE_TREE is %d\n", TWO_LEVEL_NODE_TREE);\n   fprintf(stderr, "TWO_LEVEL_CHILD_TREE is %d\n", TWO_LEVEL_CHILD_TREE);\n   fprintf(stderr, "QRYTEX is %d\n", QRYTEX);\n   fprintf(stderr, "COALESCED_QUERIES is %d\n", COALESCED_QUERIES);\n   fprintf(stderr, "REFTEX is %d\n", REFTEX);\n   fprintf(stderr, "REORDER_REF is %d\n", REORDER_REF);\n   fprintf(stderr, "NODETEX is %d\n", NODETEX);\n   fprintf(stderr, "CHILDTEX is %d\n", CHILDTEX);\n   fprintf(stderr, "MERGETEX is %d\n", MERGETEX);\n   fprintf(stderr, "REORDER_TREE is %d\n", REORDER_TREE);\n	fprintf(stderr, "RENUMBER_TREE is %d\n", RENUMBER_TREE);\n\n   int err = 0;\n\n   Reference ref;\n   if ((err = createReference(OPT_reffilename, &ref)))\n   {\n	  printStringForError(err);\n	  exit(err);\n   }\n   \n   QuerySet queries;\n   if ((err = createQuerySet(OPT_qryfilename, &queries)))\n   {\n	  printStringForError(err);\n	  exit(err);\n   }\n\n   MatchContext ctx;\n   if ((err = createMatchContext(&ref, \n								&queries, \n								0, \n								OPT_on_cpu, \n								OPT_match_length, \n								OPT_stats_file,\n								OPT_reverse,\n                                OPT_forwardreverse,\n                                OPT_forwardcoordinates,\n                                OPT_showQueryLength,\n								OPT_dotfilename,\n                                OPT_texfilename,\n								&ctx)))\n   {\n	  printStringForError(err);\n	  exit(err);\n   }   \n\n   if ((err = matchQueries(&ctx)))\n   {\n	  printStringForError(err);\n	  exit(err);\n   }   \n   \n   if ((err = destroyMatchContext(&ctx)))\n   {\n	  printStringForError(err);\n	  exit(err);\n   }   \n}\n\n\n