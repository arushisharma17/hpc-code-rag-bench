#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <stdlib.h>\n#include <omp.h>\n//#define NUM_THREAD 4\n#define OPEN\n\n\nFILE *fp;\n\n//Structure to hold a node information\nstruct Node\n{\n	int starting;\n	int no_of_edges;\n};\n\nvoid BFSGraph(int argc, char** argv);\n\nvoid Usage(int argc, char**argv){\n\nfprintf(stderr,"Usage: %s <num_threads> <input_file>\n", argv[0]);\n\n}\n////////////////////////////////////////////////////////////////////////////////\n// Main Program\n////////////////////////////////////////////////////////////////////////////////\nint main( int argc, char** argv) \n{\n	BFSGraph( argc, argv);\n}\n\n\n\n////////////////////////////////////////////////////////////////////////////////\n//Apply BFS on a Graph using CUDA\n////////////////////////////////////////////////////////////////////////////////\nvoid BFSGraph( int argc, char** argv) \n{\n        int no_of_nodes = 0;\n        int edge_list_size = 0;\n        char *input_f;\n	int	 num_omp_threads;\n	\n	if(argc!=3){\n	Usage(argc, argv);\n	exit(0);\n	}\n    \n	num_omp_threads = atoi(argv[1]);\n	input_f = argv[2];\n	\n	printf("Reading File\n");\n	//Read in Graph from a file\n	fp = fopen(input_f,"r");\n	if(!fp)\n	{\n		printf("Error Reading graph file\n");\n		return;\n	}\n\n	int source = 0;\n\n	fscanf(fp,"%d",&no_of_nodes);\n   \n	// allocate host memory\n	Node* h_graph_nodes = (Node*) malloc(sizeof(Node)*no_of_nodes);\n	bool *h_graph_mask = (bool*) malloc(sizeof(bool)*no_of_nodes);\n	bool *h_updating_graph_mask = (bool*) malloc(sizeof(bool)*no_of_nodes);\n	bool *h_graph_visited = (bool*) malloc(sizeof(bool)*no_of_nodes);\n\n	int start, edgeno;   \n	// initalize the memory\n	for( unsigned int i = 0; i < no_of_nodes; i++) \n	{\n		fscanf(fp,"%d %d",&start,&edgeno);\n		h_graph_nodes[i].starting = start;\n		h_graph_nodes[i].no_of_edges = edgeno;\n		h_graph_mask[i]=false;\n		h_updating_graph_mask[i]=false;\n		h_graph_visited[i]=false;\n	}\n\n	//read the source node from the file\n	fscanf(fp,"%d",&source);\n	// source=0; //tesing code line\n\n	//set the source node as true in the mask\n	h_graph_mask[source]=true;\n	h_graph_visited[source]=true;\n\n	fscanf(fp,"%d",&edge_list_size);\n\n	int id,cost;\n	int* h_graph_edges = (int*) malloc(sizeof(int)*edge_list_size);\n	for(int i=0; i < edge_list_size ; i++)\n	{\n		fscanf(fp,"%d",&id);\n		fscanf(fp,"%d",&cost);\n		h_graph_edges[i] = id;\n	}\n\n	if(fp)\n		fclose(fp);    \n\n\n	// allocate mem for the result on host side\n	int* h_cost = (int*) malloc( sizeof(int)*no_of_nodes);\n	for(int i=0;i<no_of_nodes;i++)\n		h_cost[i]=-1;\n	h_cost[source]=0;\n	\n	printf("Start traversing the tree\n");\n	\n	int k=0;\n#ifdef OPEN\n        double start_time = omp_get_wtime();\n#ifdef OMP_OFFLOAD\n#pragma omp target data map(to: no_of_nodes, h_graph_mask[0:no_of_nodes], h_graph_nodes[0:no_of_nodes], h_graph_edges[0:edge_list_size], h_graph_visited[0:no_of_nodes], h_updating_graph_mask[0:no_of_nodes]) map(h_cost[0:no_of_nodes])\n        {\n#endif \n#endif\n	bool stop;\n	do\n        {\n            //if no thread changes this value then the loop stops\n            stop=false;\n\n#ifdef OPEN\n            //omp_set_num_threads(num_omp_threads);\n    #ifdef OMP_OFFLOAD\n    #pragma omp target\n    #endif\n    #pragma omp parallel for \n#endif \n            for(int tid = 0; tid < no_of_nodes; tid++ )\n            {\n                if (h_graph_mask[tid] == true){ \n                    h_graph_mask[tid]=false;\n                    for(int i=h_graph_nodes[tid].starting; i<(h_graph_nodes[tid].no_of_edges + h_graph_nodes[tid].starting); i++)\n                    {\n                        int id = h_graph_edges[i];\n                        if(!h_graph_visited[id])\n                        {\n                            h_cost[id]=h_cost[tid]+1;\n                            h_updating_graph_mask[id]=true;\n                        }\n                    }\n                }\n            }\n\n#ifdef OPEN\n    #ifdef OMP_OFFLOAD\n    #pragma omp target map(stop)\n    #endif\n    #pragma omp parallel for\n#endif\n            for(int tid=0; tid< no_of_nodes ; tid++ )\n            {\n                if (h_updating_graph_mask[tid] == true){\n                    h_graph_mask[tid]=true;\n                    h_graph_visited[tid]=true;\n                    stop=true;\n                    h_updating_graph_mask[tid]=false;\n                }\n            }\n            k++;\n        }\n	while(stop);\n#ifdef OPEN\n        double end_time = omp_get_wtime();\n        printf("Compute time: %lf\n", (end_time - start_time));\n#ifdef OMP_OFFLOAD\n        }\n#endif\n#endif\n	//Store the result into a file\n	FILE *fpo = fopen("result.txt","w");\n	for(int i=0;i<no_of_nodes;i++)\n		fprintf(fpo,"%d) cost:%d\n",i,h_cost[i]);\n	fclose(fpo);\n	printf("Result stored in result.txt\n");\n\n\n	// cleanup memory\n	free( h_graph_nodes);\n	free( h_graph_edges);\n	free( h_graph_mask);\n	free( h_updating_graph_mask);\n	free( h_graph_visited);\n	free( h_cost);\n\n}\n\n