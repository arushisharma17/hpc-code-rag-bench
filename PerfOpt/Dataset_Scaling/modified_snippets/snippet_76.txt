\n/**************************************************************************\n**\n** Copyright (C) 1993 David E. Steward & Zbigniew Leyk, all rights reserved.\n**\n**			     Meschach Library\n** \n** This Meschach Library is provided "as is" without any express \n** or implied warranty of any kind with respect to this software. \n** In particular the authors shall not be liable for any direct, \n** indirect, special, incidental or consequential damages arising \n** in any way from use of the software.\n** \n** Everyone is granted permission to copy, modify and redistribute this\n** Meschach Library, provided:\n**  1.  All copies contain this copyright notice.\n**  2.  All modified copies shall carry a notice stating who\n**      made the last modification and the date of such modification.\n**  3.  No charge is made for this software or works derived from it.  \n**      This clause shall not be construed as constraining other software\n**      distributed on the same medium as this software, nor is a\n**      distribution fee considered a charge.\n**\n***************************************************************************/\n\n\n/*\n  This file contains basic routines which are used by the functions\n  involving complex vectors.\n  These are the routines that should be modified in order to take\n  full advantage of specialised architectures (pipelining, vector\n  processors etc).\n  */\nstatic	char	*rcsid = "$Id: zmachine.c,v 1.1 1994/01/13 04:25:41 des Exp $";\n\n#include	<math.h>\n#include	"machine.h"\n#include        "zmatrix.h"\n\n\n/* __zconj__ -- complex conjugate */\n#ifndef ANSI_C\nvoid	__zconj__(zp,len)\ncomplex	*zp;\nint	len;\n#else\nvoid	__zconj__(complex zp[], int len)\n#endif\n{\n    int		i;\n\n    for ( i = 0; i < len; i++ )\n	zp[i].im = - zp[i].im;\n}\n\n/* __zip__ -- inner product\n	-- computes sum_i zp1[i].zp2[i] if flag == 0\n		    sum_i zp1[i]*.zp2[i] if flag != 0 */\n#ifndef ANSI_C\ncomplex	__zip__(zp1,zp2,len,flag)\ncomplex	*zp1, *zp2;\nint	flag, len;\n#else\ncomplex	__zip__(const complex *zp1, const complex *zp2, int len, int flag)\n#endif\n{\n    complex	sum;\n    int		i;\n\n    sum.re = sum.im = 0.0;\n    if ( flag )\n    {\n	for ( i = 0; i < len; i++ )\n	{\n	    sum.re += zp1[i].re*zp2[i].re + zp1[i].im*zp2[i].im;\n	    sum.im += zp1[i].re*zp2[i].im - zp1[i].im*zp2[i].re;\n	}\n    }\n    else\n    {\n	for ( i = 0; i < len; i++ )\n	{\n	    sum.re += zp1[i].re*zp2[i].re - zp1[i].im*zp2[i].im;\n	    sum.im += zp1[i].re*zp2[i].im + zp1[i].im*zp2[i].re;\n	}\n    }\n\n    return sum;\n}\n\n/* __zmltadd__ -- scalar multiply and add i.e. complex saxpy\n	-- computes zp1[i] += s.zp2[i]  if flag == 0\n	-- computes zp1[i] += s.zp2[i]* if flag != 0 */\n#ifndef ANSI_C\nvoid	__zmltadd__(zp1,zp2,s,len,flag)\ncomplex	*zp1, *zp2, s;\nint	flag, len;\n#else\nvoid	__zmltadd__(complex *zp1, const complex *zp2, complex s,\n		    int len, int flag)\n#endif\n{\n    int		i;\n    LongReal	t_re, t_im;\n\n    if ( ! flag )\n    {\n	for ( i = 0; i < len; i++ )\n	{\n	    t_re = zp1[i].re + s.re*zp2[i].re - s.im*zp2[i].im;\n	    t_im = zp1[i].im + s.re*zp2[i].im + s.im*zp2[i].re;\n	    zp1[i].re = t_re;\n	    zp1[i].im = t_im;\n	}\n    }\n    else\n    {\n	for ( i = 0; i < len; i++ )\n	{\n	    t_re = zp1[i].re + s.re*zp2[i].re + s.im*zp2[i].im;\n	    t_im = zp1[i].im - s.re*zp2[i].im + s.im*zp2[i].re;\n	    zp1[i].re = t_re;\n	    zp1[i].im = t_im;\n	}\n    }\n}\n\n/* __zmlt__ scalar complex multiply array c.f. sv_mlt() */\n#ifndef ANSI_C\nvoid	__zmlt__(zp,s,out,len)\ncomplex	*zp, s, *out;\nregister int	len;\n#else\nvoid	__zmlt__(const complex *zp, complex s, complex *out, int len)\n#endif\n{\n    int		i;\n    LongReal	t_re, t_im;\n\n    for ( i = 0; i < len; i++ )\n    {\n	t_re = s.re*zp[i].re - s.im*zp[i].im;\n	t_im = s.re*zp[i].im + s.im*zp[i].re;\n	out[i].re = t_re;\n	out[i].im = t_im;\n    }\n}\n\n/* __zadd__ -- add complex arrays c.f. v_add() */\n#ifndef ANSI_C\nvoid	__zadd__(zp1,zp2,out,len)\ncomplex	*zp1, *zp2, *out;\nint	len;\n#else\nvoid	__zadd__(const complex *zp1, const complex *zp2, complex *out, int len)\n#endif\n{\n    int		i;\n    for ( i = 0; i < len; i++ )\n    {\n	out[i].re = zp1[i].re + zp2[i].re;\n	out[i].im = zp1[i].im + zp2[i].im;\n    }\n}\n\n/* __zsub__ -- subtract complex arrays c.f. v_sub() */\n#ifndef ANSI_C\nvoid	__zsub__(zp1,zp2,out,len)\ncomplex	*zp1, *zp2, *out;\nint	len;\n#else\nvoid	__zsub__(const complex *zp1, const complex *zp2, complex *out, int len)\n#endif\n{\n    int		i;\n    for ( i = 0; i < len; i++ )\n    {\n	out[i].re = zp1[i].re - zp2[i].re;\n	out[i].im = zp1[i].im - zp2[i].im;\n    }\n}\n\n/* __zzero__ -- zeros an array of complex numbers */\n#ifndef ANSI_C\nvoid	__zzero__(zp,len)\ncomplex	*zp;\nint	len;\n#else\nvoid	__zzero__(complex *zp, int len)\n#endif\n{\n    /* if a Real precision zero is equivalent to a string of nulls */\n    MEM_ZERO((char *)zp,len*sizeof(complex));\n    /* else, need to zero the array entry by entry */\n    /******************************\n    while ( len-- )\n    {\n	zp->re = zp->im = 0.0;\n	zp++;\n    }\n    ******************************/\n}\n\n