#include <iostream>\nusing namespace std;\n\ninline int max2(int a, int b)\n{\n  return (a > b) ? a : b;\n}\n\ninline int max4(int a, int b, int c, int d)\n{\n  int maxl = (a > b) ? a : b;\n  int maxr = (c > d) ? c : d;\n\n  return (maxl > maxr) ? maxl : maxr;\n}\n\nint s(char a, char b, int match_score, int mismatch_score)\n{\n  if (a == b)\n  {\n    return match_score;\n  }\n  \n  return mismatch_score;\n}\n\nstruct aligned_t\n{\n  char s;\n  char t;\n  int score;\n};\ntypedef struct aligned_t aligned_t;\n\n\n\nvoid align(const string & S, \n           const string & T,\n           int match_score,\n           int mismatch_score,\n           int gap_open,\n           int gap_extension)\n{\n  int m = S.length()-1;\n  int n = T.length()-1;\n\n  int E[m+2][n+2];\n  int F[m+2][n+2];\n  int G[m+2][n+2];\n  int V[m+2][n+2];\n\n\n  // initialize matrices\n  for (int i = 0; i <= m; i++)\n  {\n    //E[i][0] = -gap_open + -gap_extension*i;\n    E[i][0] = 0;\n    F[i][0] = 0;\n    G[i][0] = 0;\n    V[i][0] = E[i][0];\n  }\n\n  for (int j = 0; j <= n; j++)\n  {\n    //F[0][j] = -gap_open + -gap_extension*j;\n    F[0][j] = 0;\n    E[0][j] = 0;\n    G[0][j] = 0;\n    V[0][j] = F[0][j];\n  }\n\n  G[0][0] = 0;\n  V[0][0] = 0;\n\n  int maxi = 0;\n  int maxj = 0;\n  int maxv = 0;\n\n  // compute the matrix\n  for (int i = 1; i <= m; i++)\n  {\n    for (int j = 1; j <= n; j++)\n    {\n      E[i][j] = max2(E[i-1][j] - gap_extension,\n                     V[i-1][j] - gap_open - gap_extension);\n\n      F[i][j] = max2(F[i-1][j] - gap_extension,\n                     V[i-1][j] - gap_open - gap_extension);\n\n      G[i][j] = V[i-1][j-1] + s(S[i], T[j], match_score, mismatch_score);\n\n      V[i][j] = max4(E[i][j], F[i][j], G[i][j], 0);\n\n      if (V[i][j] > maxv)\n      {\n        maxv = V[i][j];\n        maxi = i;\n        maxj = j;\n      }\n    }\n  }\n\n\n  // // print the scores\n  // cout << "V" << endl;\n  // cout << "=======================================" << endl;\n  // for (int i = 0; i <= m; i++)\n  // {\n  //   if (i == 0)\n  //   {\n  //     cout << " \t";\n  //     for (int j = 0; j <= n; j++) { cout << T[j] << "\t"; }\n  //     cout << endl;\n  //   }\n  // \n  //   cout << S[i] << "\t";\n  //   for (int j = 0; j <= n; j++)\n  //   {\n  //     cout << V[i][j];\n  //     if (V[i][j] == maxv) { cout << "*"; }\n  //     cout << "\t";\n  //   }\n  // \n  // \n  //   cout << endl;\n  // }\n  // \n  // cout << endl << endl;\n  // cout << "E" << endl;\n  // cout << "=======================================" << endl;\n  // for (int i = 0; i <= m; i++)\n  // {\n  //   if (i == 0)\n  //   {\n  //     cout << " \t";\n  //     for (int j = 0; j <= n; j++) { cout << T[j] << "\t"; }\n  //     cout << endl;\n  //   }\n  // \n  //   cout << S[i] << "\t";\n  //   for (int j = 0; j <= n; j++)\n  //   {\n  //     cout << E[i][j];\n  //     cout << "\t";\n  //   }\n  // \n  //   cout << endl;\n  // }\n  // \n  // cout << endl << endl;\n  // cout << "F" << endl;\n  // cout << "=======================================" << endl;\n  // for (int i = 0; i <= m; i++)\n  // {\n  //   if (i == 0)\n  //   {\n  //     cout << " \t";\n  //     for (int j = 0; j <= n; j++) { cout << T[j] << "\t"; }\n  //     cout << endl;\n  //   }\n  // \n  //   cout << S[i] << "\t";\n  //   for (int j = 0; j <= n; j++)\n  //   {\n  //     cout << F[i][j];\n  //     cout << "\t";\n  //   }\n  // \n  //   cout << endl;\n  // }\n  // \n  // cout << endl << endl;\n  // cout << "G" << endl;\n  // cout << "=======================================" << endl;\n  // for (int i = 0; i <= m; i++)\n  // {\n  //   if (i == 0)\n  //   {\n  //     cout << " \t";\n  //     for (int j = 0; j <= n; j++) { cout << T[j] << "\t"; }\n  //     cout << endl;\n  //   }\n  // \n  //   cout << S[i] << "\t";\n  //   for (int j = 0; j <= n; j++)\n  //   {\n  //     cout << G[i][j];\n  //     cout << "\t";\n  //   }\n  // \n  //   cout << endl;\n  // }\n  // \n  // \n  // cout << "max score[" << maxi << "," << maxj << "]:" << maxv << endl;\n\n\n  // print the alignment\n  aligned_t trace[m+n];\n  //int i = m; int j = n;\n  int i = maxi, j = maxj;\n  int tlen = 0;\n\n  while (i > 0 && j > 0)\n  {\n    int v = V[i][j];\n    trace[tlen].score = v;\n\n    if (v == G[i][j])\n    {\n      trace[tlen].s = S[i];\n      trace[tlen].t = T[j];\n      i--;\n      j--;\n    }\n    else if (v == E[i][j])\n    {\n      trace[tlen].s = S[i];\n      trace[tlen].t = '-';\n      i--;\n    }\n    else if (v == F[i][j])\n    {\n      trace[tlen].s = '-';\n      trace[tlen].t = T[j];\n      j--;\n    }\n    else // v == 0;\n    {\n      break;\n    }\n\n    tlen++;\n  }\n\n  // for (int k = tlen - 1; k >= 0; k--)\n  // {\n  //   cout << "   " << trace[k].s;\n  // }\n  // cout << endl;\n  // \n  // for (int k = tlen - 1; k >= 0; k--)\n  // {\n  //   cout << "   " << trace[k].t;\n  // }\n  // cout << endl;\n  // \n  // for (int k = tlen - 1; k >= 0; k--)\n  // {\n  //   printf(" %3d", trace[k].score);\n  // }\n  // cout << endl;\n}\n\n\n// int main(int argc, char ** argv)\n// {\n//   string S = "sMIKESCHATZ";\n//   string T = "sQMILKSHAKE";\n//   //string S = "sAATTTGGTG";\n//   //string T = "sAAGGTCCA";\n//   \n//   int match_score = 10;\n//   int mismatch_score = -2;\n//   int gap_open = 4;\n//   int gap_extension = 1;\n// \n//   cout << "S: " << S << " " << S.length()-1 << endl;\n//   cout << "T: " << T << " " << T.length()-1 << endl;\n// \n//   align(S,T, match_score, mismatch_score, gap_open, gap_extension);\n// \n//   return 0;\n// }\n\n\n