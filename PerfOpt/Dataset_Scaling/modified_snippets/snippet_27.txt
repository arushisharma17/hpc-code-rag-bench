//=====================================================================\n//	MAIN FUNCTION\n//=====================================================================\nvoid ecc(	fp timeinst,\n				fp *initvalu,\n				int initvalu_offset,\n				fp *parameter,\n				int parameter_offset,\n				fp *finavalu){\n\n	//=====================================================================\n	//	VARIABLES\n	//=====================================================================\n\n	// initial data and output data variable references\n	int offset_1;\n	int offset_2;\n	int offset_3;\n	int offset_4;\n	int offset_5;\n	int offset_6;\n	int offset_7;\n	int offset_8;\n	int offset_9;\n	int offset_10;\n	int offset_11;\n	int offset_12;\n	int offset_13;\n	int offset_14;\n	int offset_15;\n	int offset_16;\n	int offset_17;\n	int offset_18;\n	int offset_19;\n	int offset_20;\n	int offset_21;\n	int offset_22;\n	int offset_23;\n	int offset_24;\n	int offset_25;\n	int offset_26;\n	int offset_27;\n	int offset_28;\n	int offset_29;\n	int offset_30;\n	int offset_31;\n	int offset_32;\n	int offset_33;\n	int offset_34;\n	int offset_35;\n	int offset_36;\n	int offset_37;\n	int offset_38;\n	int offset_39;\n	int offset_40;\n	int offset_41;\n	int offset_42;\n	int offset_43;\n	int offset_44;\n	int offset_45;\n	int offset_46;\n\n	// initial data variable references\n	int parameter_offset_1;\n\n	// decoded input initial data			// GET VARIABLES FROM MEMORY AND SAVE LOCALLY !!!!!!!!!!!!!!!!!!\n	fp initvalu_1;\n	fp initvalu_2;\n	fp initvalu_3;\n	fp initvalu_4;\n	fp initvalu_5;\n	fp initvalu_6;\n	fp initvalu_7;\n	fp initvalu_8;\n	fp initvalu_9;\n	fp initvalu_10;\n	fp initvalu_11;\n	fp initvalu_12;\n	fp initvalu_13;\n	fp initvalu_14;\n	fp initvalu_15;\n	fp initvalu_16;\n	fp initvalu_17;\n	fp initvalu_18;\n	fp initvalu_19;\n	fp initvalu_20;\n	fp initvalu_21;\n	fp initvalu_22;\n	fp initvalu_23;\n	fp initvalu_24;\n	fp initvalu_25;\n	fp initvalu_26;\n	fp initvalu_27;\n	fp initvalu_28;\n	fp initvalu_29;\n	fp initvalu_30;\n	fp initvalu_31;\n	fp initvalu_32;\n	fp initvalu_33;\n	fp initvalu_34;\n	fp initvalu_35;\n	fp initvalu_36;\n	fp initvalu_37;\n	fp initvalu_38;\n	fp initvalu_39;\n	fp initvalu_40;\n	fp initvalu_41;\n	fp initvalu_42;\n	fp initvalu_43;\n	fp initvalu_44;\n	fp initvalu_45;\n	fp initvalu_46;\n\n	// decoded input parameters\n	fp parameter_1;\n\n	// matlab constants undefined in c\n	fp pi;\n\n	// Constants\n	fp R;																			// [J/kmol*K]  \n	fp Frdy;																		// [C/mol]  \n	fp Temp;																		// [K] 310\n	fp FoRT;																		//\n	fp Cmem;																		// [F] membrane capacitance\n	fp Qpow;\n\n	// Cell geometry\n	fp cellLength;																	// cell length [um]\n	fp cellRadius;																	// cell radius [um]\n	fp junctionLength;																// junc length [um]\n	fp junctionRadius;																// junc radius [um]\n	fp distSLcyto;																	// dist. SL to cytosol [um]\n	fp distJuncSL;																	// dist. junc to SL [um]\n	fp DcaJuncSL;																	// Dca junc to SL [cm^2/sec]\n	fp DcaSLcyto;																	// Dca SL to cyto [cm^2/sec]\n	fp DnaJuncSL;																	// Dna junc to SL [cm^2/sec]\n	fp DnaSLcyto;																	// Dna SL to cyto [cm^2/sec] \n	fp Vcell;																		// [L]\n	fp Vmyo; \n	fp Vsr; \n	fp Vsl; \n	fp Vjunc; \n	fp SAjunc;																		// [um^2]\n	fp SAsl;																		// [um^2]\n	fp J_ca_juncsl;																	// [L/msec]\n	fp J_ca_slmyo;																	// [L/msec]\n	fp J_na_juncsl;																	// [L/msec] \n	fp J_na_slmyo;																	// [L/msec] \n\n	// Fractional currents in compartments\n	fp Fjunc;   \n	fp Fsl;\n	fp Fjunc_CaL; \n	fp Fsl_CaL;\n\n	// Fixed ion concentrations     \n	fp Cli;																			// Intracellular Cl  [mM]\n	fp Clo;																			// Extracellular Cl  [mM]\n	fp Ko;																			// Extracellular K   [mM]\n	fp Nao;																			// Extracellular Na  [mM]\n	fp Cao;																			// Extracellular Ca  [mM]\n	fp Mgi;																			// Intracellular Mg  [mM]\n\n	// Nernst Potentials\n	fp ena_junc;																	// [mV]\n	fp ena_sl;																		// [mV]\n	fp ek;																			// [mV]\n	fp eca_junc;																	// [mV]\n	fp eca_sl;																		// [mV]\n	fp ecl;																			// [mV]\n\n	// Na transport parameters\n	fp GNa;																			// [mS/uF]\n	fp GNaB;																		// [mS/uF] \n	fp IbarNaK;																		// [uA/uF]\n	fp KmNaip;																		// [mM]\n	fp KmKo;																		// [mM]\n	fp Q10NaK;  \n	fp Q10KmNai;\n\n	// K current parameters\n	fp pNaK;      \n	fp GtoSlow;																		// [mS/uF] \n	fp GtoFast;																		// [mS/uF] \n	fp gkp;\n\n	// Cl current parameters\n	fp GClCa;																		// [mS/uF]\n	fp GClB;																		// [mS/uF]\n	fp KdClCa;																		// [mM]																// [mM]\n\n	// I_Ca parameters\n	fp pNa;																			// [cm/sec]\n	fp pCa;																			// [cm/sec]\n	fp pK;																			// [cm/sec]\n	fp KmCa;																		// [mM]\n	fp Q10CaL;       \n\n	// Ca transport parameters\n	fp IbarNCX;																		// [uA/uF]\n	fp KmCai;																		// [mM]\n	fp KmCao;																		// [mM]\n	fp KmNai;																		// [mM]\n	fp KmNao;																		// [mM]\n	fp ksat;																			// [none]  \n	fp nu;																			// [none]\n	fp Kdact;																		// [mM] \n	fp Q10NCX;																		// [none]\n	fp IbarSLCaP;																	// [uA/uF]\n	fp KmPCa;																		// [mM] \n	fp GCaB;																		// [uA/uF] \n	fp Q10SLCaP;																	// [none]																	// [none]\n\n	// SR flux parameters\n	fp Q10SRCaP;																	// [none]\n	fp Vmax_SRCaP;																	// [mM/msec] (mmol/L cytosol/msec)\n	fp Kmf;																			// [mM]\n	fp Kmr;																			// [mM]L cytosol\n	fp hillSRCaP;																	// [mM]\n	fp ks;																			// [1/ms]      \n	fp koCa;																		// [mM^-2 1/ms]      \n	fp kom;																			// [1/ms]     \n	fp kiCa;																		// [1/mM/ms]\n	fp kim;																			// [1/ms]\n	fp ec50SR;																		// [mM]\n\n	// Buffering parameters\n	fp Bmax_Naj;																	// [mM] \n	fp Bmax_Nasl;																	// [mM]\n	fp koff_na;																		// [1/ms]\n	fp kon_na;																		// [1/mM/ms]\n	fp Bmax_TnClow;																	// [mM], TnC low affinity\n	fp koff_tncl;																	// [1/ms] \n	fp kon_tncl;																	// [1/mM/ms]\n	fp Bmax_TnChigh;																// [mM], TnC high affinity \n	fp koff_tnchca;																	// [1/ms] \n	fp kon_tnchca;																	// [1/mM/ms]\n	fp koff_tnchmg;																	// [1/ms] \n	fp kon_tnchmg;																	// [1/mM/ms]\n	fp Bmax_CaM;																	// [mM], CaM buffering\n	fp koff_cam;																	// [1/ms] \n	fp kon_cam;																		// [1/mM/ms]\n	fp Bmax_myosin;																	// [mM], Myosin buffering\n	fp koff_myoca;																	// [1/ms]\n	fp kon_myoca;																	// [1/mM/ms]\n	fp koff_myomg;																	// [1/ms]\n	fp kon_myomg;																	// [1/mM/ms]\n	fp Bmax_SR;																		// [mM] \n	fp koff_sr;																		// [1/ms]\n	fp kon_sr;																		// [1/mM/ms]\n	fp Bmax_SLlowsl;																// [mM], SL buffering\n	fp Bmax_SLlowj;																	// [mM]    \n	fp koff_sll;																	// [1/ms]\n	fp kon_sll;																		// [1/mM/ms]\n	fp Bmax_SLhighsl;																// [mM] \n	fp Bmax_SLhighj;																// [mM] \n	fp koff_slh;																	// [1/ms]\n	fp kon_slh;																		// [1/mM/ms]\n	fp Bmax_Csqn;																	// 140e-3*Vmyo/Vsr; [mM] \n	fp koff_csqn;																	// [1/ms] \n	fp kon_csqn;																	// [1/mM/ms] \n\n	// I_Na: Fast Na Current\n	fp am;\n	fp bm;\n	fp ah;\n	fp bh;\n	fp aj;\n	fp bj;\n	fp I_Na_junc;\n	fp I_Na_sl;\n	fp I_Na;\n\n	// I_nabk: Na Background Current\n	fp I_nabk_junc;\n	fp I_nabk_sl;\n	fp I_nabk;\n\n	// I_nak: Na/K Pump Current\n	fp sigma;\n	fp fnak;\n	fp I_nak_junc;\n	fp I_nak_sl;\n	fp I_nak;\n\n	// I_kr: Rapidly Activating K Current\n	fp gkr;\n	fp xrss;\n	fp tauxr;\n	fp rkr;\n	fp I_kr;\n\n	// I_ks: Slowly Activating K Current\n	fp pcaks_junc; \n	fp pcaks_sl;  \n	fp gks_junc;\n	fp gks_sl; \n	fp eks;	\n	fp xsss;\n	fp tauxs; \n	fp I_ks_junc;\n	fp I_ks_sl;\n	fp I_ks;\n\n	// I_kp: Plateau K current\n	fp kp_kp;\n	fp I_kp_junc;\n	fp I_kp_sl;\n	fp I_kp;\n\n	// I_to: Transient Outward K Current (slow and fast components)\n	fp xtoss;\n	fp ytoss;\n	fp rtoss;\n	fp tauxtos;\n	fp tauytos;\n	fp taurtos; \n	fp I_tos;	\n\n	//\n	fp tauxtof;\n	fp tauytof;\n	fp I_tof;\n	fp I_to;\n\n	// I_ki: Time-Independent K Current\n	fp aki;\n	fp bki;\n	fp kiss;\n	fp I_ki;\n\n	// I_ClCa: Ca-activated Cl Current, I_Clbk: background Cl Current\n	fp I_ClCa_junc;\n	fp I_ClCa_sl;\n	fp I_ClCa;\n	fp I_Clbk;\n\n	// I_Ca: L-type Calcium Current\n	fp dss;\n	fp taud;\n	fp fss;\n	fp tauf;\n\n	//\n	fp ibarca_j;\n	fp ibarca_sl;\n	fp ibark;\n	fp ibarna_j;\n	fp ibarna_sl;\n	fp I_Ca_junc;\n	fp I_Ca_sl;\n	fp I_Ca;\n	fp I_CaK;\n	fp I_CaNa_junc;\n	fp I_CaNa_sl;\n	fp I_CaNa;\n	fp I_Catot;\n\n	// I_ncx: Na/Ca Exchanger flux\n	fp Ka_junc;\n	fp Ka_sl;\n	fp s1_junc;\n	fp s1_sl;\n	fp s2_junc;\n	fp s3_junc;\n	fp s2_sl;\n	fp s3_sl;\n	fp I_ncx_junc;\n	fp I_ncx_sl;\n	fp I_ncx;\n\n	// I_pca: Sarcolemmal Ca Pump Current\n	fp I_pca_junc;\n	fp I_pca_sl;\n	fp I_pca;\n\n	// I_cabk: Ca Background Current\n	fp I_cabk_junc;\n	fp I_cabk_sl;\n	fp I_cabk;\n	\n	// SR fluxes: Calcium Release, SR Ca pump, SR Ca leak														\n	fp MaxSR;\n	fp MinSR;\n	fp kCaSR;\n	fp koSRCa;\n	fp kiSRCa;\n	fp RI;\n	fp J_SRCarel;																	// [mM/ms]\n	fp J_serca;\n	fp J_SRleak;																		//   [mM/ms]\n\n	// Cytosolic Ca Buffers\n	fp J_CaB_cytosol;\n\n	// Junctional and SL Ca Buffers\n	fp J_CaB_junction;\n	fp J_CaB_sl;\n\n	// SR Ca Concentrations\n	fp oneovervsr;\n\n	// Sodium Concentrations\n	fp I_Na_tot_junc;																// [uA/uF]\n	fp I_Na_tot_sl;																	// [uA/uF]\n	fp oneovervsl;\n\n	// Potassium Concentration\n	fp I_K_tot;\n\n	// Calcium Concentrations\n	fp I_Ca_tot_junc;																// [uA/uF]\n	fp I_Ca_tot_sl;																	// [uA/uF]\n	fp junc_sl;\n	fp sl_junc;\n	fp sl_myo;\n	fp myo_sl;\n\n	//	Simulation type													\n	int state;																			// 0-none; 1-pace; 2-vclamp\n	fp I_app;\n	fp V_hold;\n	fp V_test;\n	fp V_clamp;\n	fp R_clamp;\n	\n	//	Membrane Potential\n	fp I_Na_tot;																		// [uA/uF]\n	fp I_Cl_tot;																		// [uA/uF]\n	fp I_Ca_tot;\n	fp I_tot;\n\n	//=====================================================================\n	//	EXECUTION\n	//=====================================================================\n\n	// variable references\n	offset_1  = initvalu_offset;\n	offset_2  = initvalu_offset+1;\n	offset_3  = initvalu_offset+2;\n	offset_4  = initvalu_offset+3;\n	offset_5  = initvalu_offset+4;\n	offset_6  = initvalu_offset+5;\n	offset_7  = initvalu_offset+6;\n	offset_8  = initvalu_offset+7;\n	offset_9  = initvalu_offset+8;\n	offset_10 = initvalu_offset+9;\n	offset_11 = initvalu_offset+10;\n	offset_12 = initvalu_offset+11;\n	offset_13 = initvalu_offset+12;\n	offset_14 = initvalu_offset+13;\n	offset_15 = initvalu_offset+14;\n	offset_16 = initvalu_offset+15;\n	offset_17 = initvalu_offset+16;\n	offset_18 = initvalu_offset+17;\n	offset_19 = initvalu_offset+18;\n	offset_20 = initvalu_offset+19;\n	offset_21 = initvalu_offset+20;\n	offset_22 = initvalu_offset+21;\n	offset_23 = initvalu_offset+22;\n	offset_24 = initvalu_offset+23;\n	offset_25 = initvalu_offset+24;\n	offset_26 = initvalu_offset+25;\n	offset_27 = initvalu_offset+26;\n	offset_28 = initvalu_offset+27;\n	offset_29 = initvalu_offset+28;\n	offset_30 = initvalu_offset+29;\n	offset_31 = initvalu_offset+30;\n	offset_32 = initvalu_offset+31;\n	offset_33 = initvalu_offset+32;\n	offset_34 = initvalu_offset+33;\n	offset_35 = initvalu_offset+34;\n	offset_36 = initvalu_offset+35;\n	offset_37 = initvalu_offset+36;\n	offset_38 = initvalu_offset+37;\n	offset_39 = initvalu_offset+38;\n	offset_40 = initvalu_offset+39;\n	offset_41 = initvalu_offset+40;\n	offset_42 = initvalu_offset+41;\n	offset_43 = initvalu_offset+42;\n	offset_44 = initvalu_offset+43;\n	offset_45 = initvalu_offset+44;\n	offset_46 = initvalu_offset+45;\n	\n	// variable references\n	parameter_offset_1  = parameter_offset;\n\n	// decoded input initial data\n	initvalu_1  = initvalu[offset_1 ];\n	initvalu_2  = initvalu[offset_2 ];\n	initvalu_3  = initvalu[offset_3 ];\n	initvalu_4  = initvalu[offset_4 ];\n	initvalu_5  = initvalu[offset_5 ];\n	initvalu_6  = initvalu[offset_6 ];\n	initvalu_7  = initvalu[offset_7 ];\n	initvalu_8  = initvalu[offset_8 ];\n	initvalu_9  = initvalu[offset_9 ];\n	initvalu_10 = initvalu[offset_10];\n	initvalu_11 = initvalu[offset_11];\n	initvalu_12 = initvalu[offset_12];\n	initvalu_13 = initvalu[offset_13];\n	initvalu_14 = initvalu[offset_14];\n	initvalu_15 = initvalu[offset_15];\n	initvalu_16 = initvalu[offset_16];\n	initvalu_17 = initvalu[offset_17];\n	initvalu_18 = initvalu[offset_18];\n	initvalu_19 = initvalu[offset_19];\n	initvalu_20 = initvalu[offset_20];\n	initvalu_21 = initvalu[offset_21];\n	initvalu_22 = initvalu[offset_22];\n	initvalu_23 = initvalu[offset_23];\n	initvalu_24 = initvalu[offset_24];\n	initvalu_25 = initvalu[offset_25];\n	initvalu_26 = initvalu[offset_26];\n	initvalu_27 = initvalu[offset_27];\n	initvalu_28 = initvalu[offset_28];\n	initvalu_29 = initvalu[offset_29];\n	initvalu_30 = initvalu[offset_30];\n	initvalu_31 = initvalu[offset_31];\n	initvalu_32 = initvalu[offset_32];\n	initvalu_33 = initvalu[offset_33];\n	initvalu_34 = initvalu[offset_34];\n	initvalu_35 = initvalu[offset_35];\n	initvalu_36 = initvalu[offset_36];\n	initvalu_37 = initvalu[offset_37];\n	initvalu_38 = initvalu[offset_38];\n	initvalu_39 = initvalu[offset_39];\n	initvalu_40 = initvalu[offset_40];\n	initvalu_41 = initvalu[offset_41];\n	initvalu_42 = initvalu[offset_42];\n	initvalu_43 = initvalu[offset_43];\n	initvalu_44 = initvalu[offset_44];\n	initvalu_45 = initvalu[offset_45];\n	initvalu_46 = initvalu[offset_46];\n\n	// decoded input parameters\n	parameter_1 = parameter[parameter_offset_1];\n\n	// matlab constants undefined in c\n	pi = 3.1416;\n\n	// Constants\n	R = 8314;																			// [J/kmol*K]  \n	Frdy = 96485;																		// [C/mol]  \n	Temp = 310;																			// [K] 310\n	FoRT = Frdy/R/Temp;																	//\n	Cmem = 1.3810e-10;																	// [F] membrane capacitance\n	Qpow = (Temp-310)/10;\n\n	// Cell geometry\n	cellLength = 100;																	// cell length [um]\n	cellRadius = 10.25;																	// cell radius [um]\n	junctionLength = 160e-3;															// junc length [um]\n	junctionRadius = 15e-3;																// junc radius [um]\n	distSLcyto = 0.45;																	// dist. SL to cytosol [um]\n	distJuncSL = 0.5;																	// dist. junc to SL [um]\n	DcaJuncSL = 1.64e-6;																// Dca junc to SL [cm^2/sec]\n	DcaSLcyto = 1.22e-6;																// Dca SL to cyto [cm^2/sec]\n	DnaJuncSL = 1.09e-5;																// Dna junc to SL [cm^2/sec]\n	DnaSLcyto = 1.79e-5;																// Dna SL to cyto [cm^2/sec] \n	Vcell = pi*pow(cellRadius,2)*cellLength*1e-15;											// [L]\n	Vmyo = 0.65*Vcell; \n	Vsr = 0.035*Vcell; \n	Vsl = 0.02*Vcell; \n	Vjunc = 0.0539*0.01*Vcell; \n	SAjunc = 20150*pi*2*junctionLength*junctionRadius;									// [um^2]\n	SAsl = pi*2*cellRadius*cellLength;													// [um^2]\n	J_ca_juncsl = 1/1.2134e12;															// [L/msec]\n	J_ca_slmyo = 1/2.68510e11;															// [L/msec]\n	J_na_juncsl = 1/(1.6382e12/3*100);													// [L/msec] \n	J_na_slmyo = 1/(1.8308e10/3*100);													// [L/msec] \n\n	// Fractional currents in compartments\n	Fjunc = 0.11;   \n	Fsl = 1-Fjunc;\n	Fjunc_CaL = 0.9; \n	Fsl_CaL = 1-Fjunc_CaL;\n\n	// Fixed ion concentrations     \n	Cli = 15;																			// Intracellular Cl  [mM]\n	Clo = 150;																			// Extracellular Cl  [mM]\n	Ko = 5.4;																			// Extracellular K   [mM]\n	Nao = 140;																			// Extracellular Na  [mM]\n	Cao = 1.8;																			// Extracellular Ca  [mM]\n	Mgi = 1;																			// Intracellular Mg  [mM]\n\n	// Nernst Potentials\n	ena_junc = (1/FoRT)*log(Nao/initvalu_32);													// [mV]\n	ena_sl = (1/FoRT)*log(Nao/initvalu_33);													// [mV]\n	ek = (1/FoRT)*log(Ko/initvalu_35);														// [mV]\n	eca_junc = (1/FoRT/2)*log(Cao/initvalu_36);												// [mV]\n	eca_sl = (1/FoRT/2)*log(Cao/initvalu_37);													// [mV]\n	ecl = (1/FoRT)*log(Cli/Clo);														// [mV]\n\n	// Na transport parameters\n	GNa =  16.0;																		// [mS/uF]\n	GNaB = 0.297e-3;																	// [mS/uF] \n	IbarNaK = 1.90719;																	// [uA/uF]\n	KmNaip = 11;																		// [mM]\n	KmKo = 1.5;																			// [mM]\n	Q10NaK = 1.63;  \n	Q10KmNai = 1.39;\n\n	// K current parameters\n	pNaK = 0.01833;      \n	GtoSlow = 0.06;																		// [mS/uF] \n	GtoFast = 0.02;																		// [mS/uF] \n	gkp = 0.001;\n\n	// Cl current parameters\n	GClCa = 0.109625;																	// [mS/uF]\n	GClB = 9e-3;																		// [mS/uF]\n	KdClCa = 100e-3;																	// [mM]\n\n	// I_Ca parameters\n	pNa = 1.5e-8;																		// [cm/sec]\n	pCa = 5.4e-4;																		// [cm/sec]\n	pK = 2.7e-7;																		// [cm/sec]\n	KmCa = 0.6e-3;																		// [mM]\n	Q10CaL = 1.8;       \n\n	// Ca transport parameters\n	IbarNCX = 9.0;																		// [uA/uF]\n	KmCai = 3.59e-3;																	// [mM]\n	KmCao = 1.3;																		// [mM]\n	KmNai = 12.29;																		// [mM]\n	KmNao = 87.5;																		// [mM]\n	ksat = 0.27;																		// [none]  \n	nu = 0.35;																			// [none]\n	Kdact = 0.256e-3;																	// [mM] \n	Q10NCX = 1.57;																		// [none]\n	IbarSLCaP = 0.0673;																	// [uA/uF]\n	KmPCa = 0.5e-3;																		// [mM] \n	GCaB = 2.513e-4;																	// [uA/uF] \n	Q10SLCaP = 2.35;																	// [none]\n\n	// SR flux parameters\n	Q10SRCaP = 2.6;																		// [none]\n	Vmax_SRCaP = 2.86e-4;																// [mM/msec] (mmol/L cytosol/msec)\n	Kmf = 0.246e-3;																		// [mM]\n	Kmr = 1.7;																			// [mM]L cytosol\n	hillSRCaP = 1.787;																	// [mM]\n	ks = 25;																			// [1/ms]      \n	koCa = 10;																			// [mM^-2 1/ms]      \n	kom = 0.06;																			// [1/ms]     \n	kiCa = 0.5;																			// [1/mM/ms]\n	kim = 0.005;																		// [1/ms]\n	ec50SR = 0.45;																		// [mM]\n\n	// Buffering parameters\n	Bmax_Naj = 7.561;																	// [mM] \n	Bmax_Nasl = 1.65;																	// [mM]\n	koff_na = 1e-3;																		// [1/ms]\n	kon_na = 0.1e-3;																	// [1/mM/ms]\n	Bmax_TnClow = 70e-3;																// [mM], TnC low affinity\n	koff_tncl = 19.6e-3;																// [1/ms] \n	kon_tncl = 32.7;																	// [1/mM/ms]\n	Bmax_TnChigh = 140e-3;																// [mM], TnC high affinity \n	koff_tnchca = 0.032e-3;																// [1/ms] \n	kon_tnchca = 2.37;																	// [1/mM/ms]\n	koff_tnchmg = 3.33e-3;																// [1/ms] \n	kon_tnchmg = 3e-3;																	// [1/mM/ms]\n	Bmax_CaM = 24e-3;																	// [mM], CaM buffering\n	koff_cam = 238e-3;																	// [1/ms] \n	kon_cam = 34;																		// [1/mM/ms]\n	Bmax_myosin = 140e-3;																// [mM], Myosin buffering\n	koff_myoca = 0.46e-3;																// [1/ms]\n	kon_myoca = 13.8;																	// [1/mM/ms]\n	koff_myomg = 0.057e-3;																// [1/ms]\n	kon_myomg = 0.0157;																	// [1/mM/ms]\n	Bmax_SR = 19*0.9e-3;																	// [mM] \n	koff_sr = 60e-3;																	// [1/ms]\n	kon_sr = 100;																		// [1/mM/ms]\n	Bmax_SLlowsl = 37.38e-3*Vmyo/Vsl;													// [mM], SL buffering\n	Bmax_SLlowj = 4.62e-3*Vmyo/Vjunc*0.1;												// [mM]    \n	koff_sll = 1300e-3;																	// [1/ms]\n	kon_sll = 100;																		// [1/mM/ms]\n	Bmax_SLhighsl = 13.35e-3*Vmyo/Vsl;													// [mM] \n	Bmax_SLhighj = 1.65e-3*Vmyo/Vjunc*0.1;												// [mM] \n	koff_slh = 30e-3;																	// [1/ms]\n	kon_slh = 100;																		// [1/mM/ms]\n	Bmax_Csqn = 2.7;																	// 140e-3*Vmyo/Vsr; [mM] \n	koff_csqn = 65;																		// [1/ms] \n	kon_csqn = 100;																		// [1/mM/ms] \n\n	// I_Na: Fast Na Current\n	am = 0.32*(initvalu_39+47.13)/(1-exp(-0.1*(initvalu_39+47.13)));\n	bm = 0.08*exp(-initvalu_39/11);\n	if(initvalu_39 >= -40){\n		ah = 0; aj = 0;\n		bh = 1/(0.13*(1+exp(-(initvalu_39+10.66)/11.1)));\n		bj = 0.3*exp(-2.535e-7*initvalu_39)/(1+exp(-0.1*(initvalu_39+32)));\n	}\n	else{\n		ah = 0.135*exp((80+initvalu_39)/-6.8);\n		bh = 3.56*exp(0.079*initvalu_39)+3.1e5*exp(0.35*initvalu_39);\n		aj = (-127140*exp(0.2444*initvalu_39)-3.474e-5*exp(-0.04391*initvalu_39))*(initvalu_39+37.78)/(1+exp(0.311*(initvalu_39+79.23)));\n		bj = 0.1212*exp(-0.01052*initvalu_39)/(1+exp(-0.1378*(initvalu_39+40.14)));\n	}\n	finavalu[offset_1] = am*(1-initvalu_1)-bm*initvalu_1;\n	finavalu[offset_2] = ah*(1-initvalu_2)-bh*initvalu_2;\n	finavalu[offset_3] = aj*(1-initvalu_3)-bj*initvalu_3;\n	I_Na_junc = Fjunc*GNa*pow(initvalu_1,3)*initvalu_2*initvalu_3*(initvalu_39-ena_junc);\n	I_Na_sl = Fsl*GNa*pow(initvalu_1,3)*initvalu_2*initvalu_3*(initvalu_39-ena_sl);\n	I_Na = I_Na_junc+I_Na_sl;\n\n	// I_nabk: Na Background Current\n	I_nabk_junc = Fjunc*GNaB*(initvalu_39-ena_junc);\n	I_nabk_sl = Fsl*GNaB*(initvalu_39-ena_sl);\n	I_nabk = I_nabk_junc+I_nabk_sl;\n\n	// I_nak: Na/K Pump Current\n	sigma = (exp(Nao/67.3)-1)/7;\n	fnak = 1/(1+0.1245*exp(-0.1*initvalu_39*FoRT)+0.0365*sigma*exp(-initvalu_39*FoRT));\n	I_nak_junc = Fjunc*IbarNaK*fnak*Ko /(1+pow((KmNaip/initvalu_32),4)) /(Ko+KmKo);\n	I_nak_sl = Fsl*IbarNaK*fnak*Ko /(1+pow((KmNaip/initvalu_33),4)) /(Ko+KmKo);\n	I_nak = I_nak_junc+I_nak_sl;\n\n	// I_kr: Rapidly Activating K Current\n	gkr = 0.03*sqrt(Ko/5.4);\n	xrss = 1/(1+exp(-(initvalu_39+50)/7.5));\n	tauxr = 1/(0.00138*(initvalu_39+7)/(1-exp(-0.123*(initvalu_39+7)))+6.1e-4*(initvalu_39+10)/(exp(0.145*(initvalu_39+10))-1));\n	finavalu[offset_12] = (xrss-initvalu_12)/tauxr;\n	rkr = 1/(1+exp((initvalu_39+33)/22.4));\n	I_kr = gkr*initvalu_12*rkr*(initvalu_39-ek);\n\n	// I_ks: Slowly Activating K Current\n	pcaks_junc = -log10(initvalu_36)+3.0; \n	pcaks_sl = -log10(initvalu_37)+3.0;  \n	gks_junc = 0.07*(0.057 +0.19/(1+ exp((-7.2+pcaks_junc)/0.6)));\n	gks_sl = 0.07*(0.057 +0.19/(1+ exp((-7.2+pcaks_sl)/0.6))); \n	eks = (1/FoRT)*log((Ko+pNaK*Nao)/(initvalu_35+pNaK*initvalu_34));	\n	xsss = 1/(1+exp(-(initvalu_39-1.5)/16.7));\n	tauxs = 1/(7.19e-5*(initvalu_39+30)/(1-exp(-0.148*(initvalu_39+30)))+1.31e-4*(initvalu_39+30)/(exp(0.0687*(initvalu_39+30))-1)); \n	finavalu[offset_13] = (xsss-initvalu_13)/tauxs;\n	I_ks_junc = Fjunc*gks_junc*pow(initvalu_12,2)*(initvalu_39-eks);\n	I_ks_sl = Fsl*gks_sl*pow(initvalu_13,2)*(initvalu_39-eks);\n	I_ks = I_ks_junc+I_ks_sl;\n\n	// I_kp: Plateau K current\n	kp_kp = 1/(1+exp(7.488-initvalu_39/5.98));\n	I_kp_junc = Fjunc*gkp*kp_kp*(initvalu_39-ek);\n	I_kp_sl = Fsl*gkp*kp_kp*(initvalu_39-ek);\n	I_kp = I_kp_junc+I_kp_sl;\n\n	// I_to: Transient Outward K Current (slow and fast components)\n	xtoss = 1/(1+exp(-(initvalu_39+3.0)/15));\n	ytoss = 1/(1+exp((initvalu_39+33.5)/10));\n	rtoss = 1/(1+exp((initvalu_39+33.5)/10));\n	tauxtos = 9/(1+exp((initvalu_39+3.0)/15))+0.5;\n	tauytos = 3e3/(1+exp((initvalu_39+60.0)/10))+30;\n	taurtos = 2800/(1+exp((initvalu_39+60.0)/10))+220; \n	finavalu[offset_8] = (xtoss-initvalu_8)/tauxtos;\n	finavalu[offset_9] = (ytoss-initvalu_9)/tauytos;\n	finavalu[offset_40]= (rtoss-initvalu_40)/taurtos; \n	I_tos = GtoSlow*initvalu_8*(initvalu_9+0.5*initvalu_40)*(initvalu_39-ek);									// [uA/uF]\n\n	//\n	tauxtof = 3.5*exp(-initvalu_39*initvalu_39/30/30)+1.5;\n	tauytof = 20.0/(1+exp((initvalu_39+33.5)/10))+20.0;\n	finavalu[offset_10] = (xtoss-initvalu_10)/tauxtof;\n	finavalu[offset_11] = (ytoss-initvalu_11)/tauytof;\n	I_tof = GtoFast*initvalu_10*initvalu_11*(initvalu_39-ek);\n	I_to = I_tos + I_tof;\n\n	// I_ki: Time-Independent K Current\n	aki = 1.02/(1+exp(0.2385*(initvalu_39-ek-59.215)));\n	bki =(0.49124*exp(0.08032*(initvalu_39+5.476-ek)) + exp(0.06175*(initvalu_39-ek-594.31))) /(1 + exp(-0.5143*(initvalu_39-ek+4.753)));\n	kiss = aki/(aki+bki);\n	I_ki = 0.9*sqrt(Ko/5.4)*kiss*(initvalu_39-ek);\n\n	// I_ClCa: Ca-activated Cl Current, I_Clbk: background Cl Current\n	I_ClCa_junc = Fjunc*GClCa/(1+KdClCa/initvalu_36)*(initvalu_39-ecl);\n	I_ClCa_sl = Fsl*GClCa/(1+KdClCa/initvalu_37)*(initvalu_39-ecl);\n	I_ClCa = I_ClCa_junc+I_ClCa_sl;\n	I_Clbk = GClB*(initvalu_39-ecl);\n\n	// I_Ca: L-type Calcium Current\n	dss = 1/(1+exp(-(initvalu_39+14.5)/6.0));\n	taud = dss*(1-exp(-(initvalu_39+14.5)/6.0))/(0.035*(initvalu_39+14.5));\n	fss = 1/(1+exp((initvalu_39+35.06)/3.6))+0.6/(1+exp((50-initvalu_39)/20));\n	tauf = 1/(0.0197*exp(-pow(0.0337*(initvalu_39+14.5),2))+0.02);\n	finavalu[offset_4] = (dss-initvalu_4)/taud;\n	finavalu[offset_5] = (fss-initvalu_5)/tauf;\n	finavalu[offset_6] = 1.7*initvalu_36*(1-initvalu_6)-11.9e-3*initvalu_6;											// fCa_junc  \n	finavalu[offset_7] = 1.7*initvalu_37*(1-initvalu_7)-11.9e-3*initvalu_7;											// fCa_sl\n\n	//\n	ibarca_j = pCa*4*(initvalu_39*Frdy*FoRT) * (0.341*initvalu_36*exp(2*initvalu_39*FoRT)-0.341*Cao) /(exp(2*initvalu_39*FoRT)-1);\n	ibarca_sl = pCa*4*(initvalu_39*Frdy*FoRT) * (0.341*initvalu_37*exp(2*initvalu_39*FoRT)-0.341*Cao) /(exp(2*initvalu_39*FoRT)-1);\n	ibark = pK*(initvalu_39*Frdy*FoRT)*(0.75*initvalu_35*exp(initvalu_39*FoRT)-0.75*Ko) /(exp(initvalu_39*FoRT)-1);\n	ibarna_j = pNa*(initvalu_39*Frdy*FoRT) *(0.75*initvalu_32*exp(initvalu_39*FoRT)-0.75*Nao)  /(exp(initvalu_39*FoRT)-1);\n	ibarna_sl = pNa*(initvalu_39*Frdy*FoRT) *(0.75*initvalu_33*exp(initvalu_39*FoRT)-0.75*Nao)  /(exp(initvalu_39*FoRT)-1);\n	I_Ca_junc = (Fjunc_CaL*ibarca_j*initvalu_4*initvalu_5*(1-initvalu_6)*pow(Q10CaL,Qpow))*0.45;\n	I_Ca_sl = (Fsl_CaL*ibarca_sl*initvalu_4*initvalu_5*(1-initvalu_7)*pow(Q10CaL,Qpow))*0.45;\n	I_Ca = I_Ca_junc+I_Ca_sl;\n	finavalu[offset_43]=-I_Ca*Cmem/(Vmyo*2*Frdy)*1e3;\n	I_CaK = (ibark*initvalu_4*initvalu_5*(Fjunc_CaL*(1-initvalu_6)+Fsl_CaL*(1-initvalu_7))*pow(Q10CaL,Qpow))*0.45;\n	I_CaNa_junc = (Fjunc_CaL*ibarna_j*initvalu_4*initvalu_5*(1-initvalu_6)*pow(Q10CaL,Qpow))*0.45;\n	I_CaNa_sl = (Fsl_CaL*ibarna_sl*initvalu_4*initvalu_5*(1-initvalu_7)*pow(Q10CaL,Qpow))*0.45;\n	I_CaNa = I_CaNa_junc+I_CaNa_sl;\n	I_Catot = I_Ca+I_CaK+I_CaNa;\n\n	// I_ncx: Na/Ca Exchanger flux\n	Ka_junc = 1/(1+pow((Kdact/initvalu_36),3));\n	Ka_sl = 1/(1+pow((Kdact/initvalu_37),3));\n	s1_junc = exp(nu*initvalu_39*FoRT)*pow(initvalu_32,3)*Cao;\n	s1_sl = exp(nu*initvalu_39*FoRT)*pow(initvalu_33,3)*Cao;\n	s2_junc = exp((nu-1)*initvalu_39*FoRT)*pow(Nao,3)*initvalu_36;\n	s3_junc = (KmCai*pow(Nao,3)*(1+pow((initvalu_32/KmNai),3))+pow(KmNao,3)*initvalu_36+ pow(KmNai,3)*Cao*(1+initvalu_36/KmCai)+KmCao*pow(initvalu_32,3)+pow(initvalu_32,3)*Cao+pow(Nao,3)*initvalu_36)*(1+ksat*exp((nu-1)*initvalu_39*FoRT));\n	s2_sl = exp((nu-1)*initvalu_39*FoRT)*pow(Nao,3)*initvalu_37;\n	s3_sl = (KmCai*pow(Nao,3)*(1+pow((initvalu_33/KmNai),3)) + pow(KmNao,3)*initvalu_37+pow(KmNai,3)*Cao*(1+initvalu_37/KmCai)+KmCao*pow(initvalu_33,3)+pow(initvalu_33,3)*Cao+pow(Nao,3)*initvalu_37)*(1+ksat*exp((nu-1)*initvalu_39*FoRT));\n	I_ncx_junc = Fjunc*IbarNCX*pow(Q10NCX,Qpow)*Ka_junc*(s1_junc-s2_junc)/s3_junc;\n	I_ncx_sl = Fsl*IbarNCX*pow(Q10NCX,Qpow)*Ka_sl*(s1_sl-s2_sl)/s3_sl;\n	I_ncx = I_ncx_junc+I_ncx_sl;\n	finavalu[offset_45]=2*I_ncx*Cmem/(Vmyo*2*Frdy)*1e3;\n\n	// I_pca: Sarcolemmal Ca Pump Current\n	I_pca_junc = 	Fjunc * \n					pow(Q10SLCaP,Qpow) * \n					IbarSLCaP * \n					pow(initvalu_36,1.6) /\n					(pow(KmPCa,1.6) + pow(initvalu_36,1.6));\n	I_pca_sl = 	Fsl * \n				pow(Q10SLCaP,Qpow) * \n				IbarSLCaP * \n				pow(initvalu_37,1.6) / \n				(pow(KmPCa,1.6) + pow(initvalu_37,1.6));\n	I_pca = I_pca_junc+I_pca_sl;\n	finavalu[offset_44]=-I_pca*Cmem/(Vmyo*2*Frdy)*1e3;\n\n	// I_cabk: Ca Background Current\n	I_cabk_junc = Fjunc*GCaB*(initvalu_39-eca_junc);\n	I_cabk_sl = Fsl*GCaB*(initvalu_39-eca_sl);\n	I_cabk = I_cabk_junc+I_cabk_sl;\n	finavalu[offset_46]=-I_cabk*Cmem/(Vmyo*2*Frdy)*1e3;\n	\n	// SR fluxes: Calcium Release, SR Ca pump, SR Ca leak														\n	MaxSR = 15; \n	MinSR = 1;\n	kCaSR = MaxSR - (MaxSR-MinSR)/(1+pow(ec50SR/initvalu_31,2.5));\n	koSRCa = koCa/kCaSR;\n	kiSRCa = kiCa*kCaSR;\n	RI = 1-initvalu_14-initvalu_15-initvalu_16;\n	finavalu[offset_14] = (kim*RI-kiSRCa*initvalu_36*initvalu_14)-(koSRCa*pow(initvalu_36,2)*initvalu_14-kom*initvalu_15);			// R\n	finavalu[offset_15] = (koSRCa*pow(initvalu_36,2)*initvalu_14-kom*initvalu_15)-(kiSRCa*initvalu_36*initvalu_15-kim*initvalu_16);			// O\n	finavalu[offset_16] = (kiSRCa*initvalu_36*initvalu_15-kim*initvalu_16)-(kom*initvalu_16-koSRCa*pow(initvalu_36,2)*RI);			// I\n	J_SRCarel = ks*initvalu_15*(initvalu_31-initvalu_36);													// [mM/ms]\n	J_serca = pow(Q10SRCaP,Qpow)*Vmax_SRCaP*(pow((initvalu_38/Kmf),hillSRCaP)-pow((initvalu_31/Kmr),hillSRCaP))\n										 /(1+pow((initvalu_38/Kmf),hillSRCaP)+pow((initvalu_31/Kmr),hillSRCaP));\n	J_SRleak = 5.348e-6*(initvalu_31-initvalu_36);													//   [mM/ms]\n\n	// Sodium and Calcium Buffering														\n	finavalu[offset_17] = kon_na*initvalu_32*(Bmax_Naj-initvalu_17)-koff_na*initvalu_17;								// NaBj      [mM/ms]\n	finavalu[offset_18] = kon_na*initvalu_33*(Bmax_Nasl-initvalu_18)-koff_na*initvalu_18;							// NaBsl     [mM/ms]\n\n	// Cytosolic Ca Buffers\n	finavalu[offset_19] = kon_tncl*initvalu_38*(Bmax_TnClow-initvalu_19)-koff_tncl*initvalu_19;						// TnCL      [mM/ms]\n	finavalu[offset_20] = kon_tnchca*initvalu_38*(Bmax_TnChigh-initvalu_20-initvalu_21)-koff_tnchca*initvalu_20;			// TnCHc     [mM/ms]\n	finavalu[offset_21] = kon_tnchmg*Mgi*(Bmax_TnChigh-initvalu_20-initvalu_21)-koff_tnchmg*initvalu_21;				// TnCHm     [mM/ms]\n	finavalu[offset_22] = 0;																		// CaM       [mM/ms]\n	finavalu[offset_23] = kon_myoca*initvalu_38*(Bmax_myosin-initvalu_23-initvalu_24)-koff_myoca*initvalu_23;				// Myosin_ca [mM/ms]\n	finavalu[offset_24] = kon_myomg*Mgi*(Bmax_myosin-initvalu_23-initvalu_24)-koff_myomg*initvalu_24;				// Myosin_mg [mM/ms]\n	finavalu[offset_25] = kon_sr*initvalu_38*(Bmax_SR-initvalu_25)-koff_sr*initvalu_25;								// SRB       [mM/ms]\n	J_CaB_cytosol = finavalu[offset_19] + finavalu[offset_20] + finavalu[offset_21] + finavalu[offset_22] + finavalu[offset_23] + finavalu[offset_24] + finavalu[offset_25];\n\n	// Junctional and SL Ca Buffers\n	finavalu[offset_26] = kon_sll*initvalu_36*(Bmax_SLlowj-initvalu_26)-koff_sll*initvalu_26;						// SLLj      [mM/ms]\n	finavalu[offset_27] = kon_sll*initvalu_37*(Bmax_SLlowsl-initvalu_27)-koff_sll*initvalu_27;						// SLLsl     [mM/ms]\n	finavalu[offset_28] = kon_slh*initvalu_36*(Bmax_SLhighj-initvalu_28)-koff_slh*initvalu_28;						// SLHj      [mM/ms]\n	finavalu[offset_29] = kon_slh*initvalu_37*(Bmax_SLhighsl-initvalu_29)-koff_slh*initvalu_29;						// SLHsl     [mM/ms]\n	J_CaB_junction = finavalu[offset_26]+finavalu[offset_28];\n	J_CaB_sl = finavalu[offset_27]+finavalu[offset_29];\n\n	// SR Ca Concentrations\n	finavalu[offset_30] = kon_csqn*initvalu_31*(Bmax_Csqn-initvalu_30)-koff_csqn*initvalu_30;						// Csqn      [mM/ms]\n	oneovervsr = 1/Vsr;\n	finavalu[offset_31] = J_serca*Vmyo*oneovervsr-(J_SRleak*Vmyo*oneovervsr+J_SRCarel)-finavalu[offset_30];   // Ca_sr     [mM/ms] %Ratio 3 leak current\n\n	// Sodium Concentrations\n	I_Na_tot_junc = I_Na_junc+I_nabk_junc+3*I_ncx_junc+3*I_nak_junc+I_CaNa_junc;		// [uA/uF]\n	I_Na_tot_sl = I_Na_sl+I_nabk_sl+3*I_ncx_sl+3*I_nak_sl+I_CaNa_sl;					// [uA/uF]\n	finavalu[offset_32] = -I_Na_tot_junc*Cmem/(Vjunc*Frdy)+J_na_juncsl/Vjunc*(initvalu_33-initvalu_32)-finavalu[offset_17];\n	oneovervsl = 1/Vsl;\n	finavalu[offset_33] = -I_Na_tot_sl*Cmem*oneovervsl/Frdy+J_na_juncsl*oneovervsl*(initvalu_32-initvalu_33)+J_na_slmyo*oneovervsl*(initvalu_34-initvalu_33)-finavalu[offset_18];\n	finavalu[offset_34] = J_na_slmyo/Vmyo*(initvalu_33-initvalu_34);											// [mM/msec] \n\n	// Potassium Concentration\n	I_K_tot = I_to+I_kr+I_ks+I_ki-2*I_nak+I_CaK+I_kp;									// [uA/uF]\n	finavalu[offset_35] = 0;															// [mM/msec]\n\n	// Calcium Concentrations\n	I_Ca_tot_junc = I_Ca_junc+I_cabk_junc+I_pca_junc-2*I_ncx_junc;						// [uA/uF]\n	I_Ca_tot_sl = I_Ca_sl+I_cabk_sl+I_pca_sl-2*I_ncx_sl;								// [uA/uF]\n	finavalu[offset_36] = -I_Ca_tot_junc*Cmem/(Vjunc*2*Frdy)+J_ca_juncsl/Vjunc*(initvalu_37-initvalu_36)\n	         - J_CaB_junction+(J_SRCarel)*Vsr/Vjunc+J_SRleak*Vmyo/Vjunc;				// Ca_j\n	finavalu[offset_37] = -I_Ca_tot_sl*Cmem/(Vsl*2*Frdy)+J_ca_juncsl/Vsl*(initvalu_36-initvalu_37)\n	         + J_ca_slmyo/Vsl*(initvalu_38-initvalu_37)-J_CaB_sl;									// Ca_sl\n	finavalu[offset_38] = -J_serca-J_CaB_cytosol +J_ca_slmyo/Vmyo*(initvalu_37-initvalu_38);\n	junc_sl=J_ca_juncsl/Vsl*(initvalu_36-initvalu_37);\n	sl_junc=J_ca_juncsl/Vjunc*(initvalu_37-initvalu_36);\n	sl_myo=J_ca_slmyo/Vsl*(initvalu_38-initvalu_37);\n	myo_sl=J_ca_slmyo/Vmyo*(initvalu_37-initvalu_38);\n\n	// Simulation type													\n	state = 1;																			\n	switch(state){\n		case 0:\n			I_app = 0;\n			break;\n		case 1:																			// pace w/ current injection at cycleLength 'cycleLength'\n			if(fmod(timeinst,parameter_1) <= 5){\n				I_app = 9.5;\n			}\n			else{\n				I_app = 0.0;\n			}\n			break;\n		case 2:     \n			V_hold = -55;\n			V_test = 0;\n			if(timeinst>0.5 & timeinst<200.5){\n				V_clamp = V_test;\n			}\n			else{\n				V_clamp = V_hold;\n			}\n			R_clamp = 0.04;\n			I_app = (V_clamp-initvalu_39)/R_clamp;\n			break;\n	} \n\n	// Membrane Potential												\n	I_Na_tot = I_Na_tot_junc + I_Na_tot_sl;												// [uA/uF]\n	I_Cl_tot = I_ClCa+I_Clbk;															// [uA/uF]\n	I_Ca_tot = I_Ca_tot_junc+I_Ca_tot_sl;\n	I_tot = I_Na_tot+I_Cl_tot+I_Ca_tot+I_K_tot;\n	finavalu[offset_39] = -(I_tot-I_app);\n\n	// Set unused output values to 0 (MATLAB does it by default)\n	finavalu[offset_41] = 0;\n	finavalu[offset_42] = 0;\n\n}\n